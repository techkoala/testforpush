<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Software - 标签 - TechKoala - Input/Output</title>
        <link>https://www.techkoala.net/tags/software/</link>
        <description>Software - 标签 - TechKoala - Input/Output</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>admin@techkoala.net (TechKoala)</managingEditor>
            <webMaster>admin@techkoala.net (TechKoala)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 28 May 2021 23:25:46 &#43;0800</lastBuildDate><atom:link href="https://www.techkoala.net/tags/software/" rel="self" type="application/rss+xml" /><item>
    <title>Docker 搭建 FreshRSS 专属 RSS 服务 </title>
    <link>https://www.techkoala.net/frsshrss/</link>
    <pubDate>Fri, 28 May 2021 23:25:46 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/frsshrss/</guid>
    <description><![CDATA[<blockquote>
<p>inoreader 等现有服务要么付费要么有限制，有服务器的话自建 FreshRSS 是一个很好的选择</p>
</blockquote>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">境外服务器是保证服务可用性的条件之一</div>
        </div>
    </div>
<h2 id="freshrss-docker-配置" class="headerLink">
    <a href="#freshrss-docker-%e9%85%8d%e7%bd%ae" class="header-mark"></a>FreshRSS Docker 配置</h2><p>创建一个新目录 <code>~/freshrss</code> 并进入该位置，新建 docker-compose.yml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 创建 FreshRSS 目录并进入
</span></span><span class="line"><span class="cl">mkdir ~/freshrss &amp;&amp; cd ~/freshrss
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 新建&amp;编辑配置文件
</span></span><span class="line"><span class="cl">vim docker-compose.yml
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="docker-composeyml" class="headerLink">
    <a href="#docker-composeyml" class="header-mark"></a>docker-compose.yml</h3><p>配置文件内容见下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ~/freshrss/docker-compose.yml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">version: &#34;3&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">services:
</span></span><span class="line"><span class="cl">  freshrss-db:
</span></span><span class="line"><span class="cl">    image: postgres:latest            # 官方示例中给出了 MySQL/MarriaDB/PostgreSQL 三种方案
</span></span><span class="line"><span class="cl">    container_name: freshrss-db
</span></span><span class="line"><span class="cl">    hostname: freshrss-db
</span></span><span class="line"><span class="cl">    restart: always
</span></span><span class="line"><span class="cl">    volumes:
</span></span><span class="line"><span class="cl">      - freshrss-db:/var/lib/postgresql/data
</span></span><span class="line"><span class="cl">    environment:
</span></span><span class="line"><span class="cl">      POSTGRES_USER: freshrss       # 数据库配置，请自行修改、避免使用默认配置
</span></span><span class="line"><span class="cl">      POSTGRES_PASSWORD: freshrss   # 数据库配置，请自行修改、避免使用默认配置
</span></span><span class="line"><span class="cl">      POSTGRES_DB: freshrss         # 数据库配置，请自行修改、避免使用默认配置
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  freshrss-app:
</span></span><span class="line"><span class="cl">    image: freshrss/freshrss:latest
</span></span><span class="line"><span class="cl">    container_name: freshrss-app
</span></span><span class="line"><span class="cl">    hostname: freshrss-app
</span></span><span class="line"><span class="cl">    restart: always
</span></span><span class="line"><span class="cl">    ports:
</span></span><span class="line"><span class="cl">      - &#34;39954:80&#34;                   # 映射端口
</span></span><span class="line"><span class="cl">    depends_on:
</span></span><span class="line"><span class="cl">      - freshrss-db
</span></span><span class="line"><span class="cl">    volumes:
</span></span><span class="line"><span class="cl">      - ./data:/var/www/FreshRSS/data
</span></span><span class="line"><span class="cl">      - ./extensions:/var/www/FreshRSS/extensions
</span></span><span class="line"><span class="cl">    environment:
</span></span><span class="line"><span class="cl">      CRON_MIN: &#39;*/45&#39;             # RSS 刷新周期，单位为分钟，*/45 表示每 45 分钟刷新一次
</span></span><span class="line"><span class="cl">      TZ: Asia/Shanghai            # 时区
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">volumes:
</span></span><span class="line"><span class="cl">  freshrss-db:
</span></span></code></pre></td></tr></table>
</div>
</div><p>确认配置后，运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="freshrss-设置" class="headerLink">
    <a href="#freshrss-%e8%ae%be%e7%bd%ae" class="header-mark"></a>FreshRSS 设置</h2><h3 id="初始化" class="headerLink">
    <a href="#%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>初始化</h3><p>数据库连接需要注意的点：</p>
<ul>
<li>主机名填写 <code>freshrss-db</code>（数据库 docker 容器名）</li>
<li>用户名、密码、数据库分别对应之前 Docker Compose 配置文件中的 POSTGRES_USER、POSTGRES_PASSWORD、POSTGRES_DB</li>
<li>表前缀任意填</li>
</ul>
<h3 id="设置" class="headerLink">
    <a href="#%e8%ae%be%e7%bd%ae" class="header-mark"></a>设置</h3><p>最好关闭<code>阅读 =&gt; 合适将文章标记为已读</code>的<code>在滚动浏览后</code>，否则即便不点击打开文章、只要你划过去就标记为已读</p>
<h3 id="扩展" class="headerLink">
    <a href="#%e6%89%a9%e5%b1%95" class="header-mark"></a>扩展</h3><p>一个重要的扩展是 <code>Auto Refresh</code>，实现自动刷新源</p>
<p>点击扩展页面中的相应扩展，会跳转到相应的下载地址，将扩展下载后上传到 FreshRSS 安装目录下的 extensions 文件夹（之前部署 FreshRSS 的 Docker Compose 配置文件中已经将 <code>~/freshrss/extensions/</code> 对应了 FreshRSS 在容器内的扩展位置，所以只需要将扩展拖至 <code>~/freshrss/extensions/</code> 即可）</p>
<p>将解压后的 xExtension-AutoRefresh 文件夹放到 ~/freshrss/extensions 目中，到 FreshRSS <code>设置-&gt; 扩展</code> 启用，刷新时间需要修改 <code>xExtension-AutoRefresh/static/script.js</code> ，其中时间相关单位是 ms</p>
<h2 id="nginx-反向代理" class="headerLink">
    <a href="#nginx-%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86" class="header-mark"></a>Nginx 反向代理</h2><p>参见<a href="/nginx_port_reuse/" rel="">使用 Nginx 实现多服务复用端口</a></p>
<h2 id="配合第三方软件" class="headerLink">
    <a href="#%e9%85%8d%e5%90%88%e7%ac%ac%e4%b8%89%e6%96%b9%e8%bd%af%e4%bb%b6" class="header-mark"></a>配合第三方软件</h2><p>推荐搭配<code>Feedme</code> 、<code>Fluent reader</code>食用更佳</p>
<p>在此之前需要到开启<code>认证 =&gt; 允许 API 访问</code>，并在<code>用户账户 =&gt; API 管理</code>中设置相应的 API 密码</p>
<p>需要注意，<code>Feedme</code>服务应选择<code>FreshRSS</code></p>
<p>参数配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">域名：https://xxx.techkoala.top/api/fever.php   # Fluent reader
</span></span><span class="line"><span class="cl">域名：https://xxx.techkoala.top/api/greader.php # Feedme 使用 fever会出现 Auth Failed
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">用户名：注册用户名
</span></span><span class="line"><span class="cl">密码：API 密码
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="https://blog.ichr.me/post/docker-freshrss-setup/" target="_blank" rel="noopener noreferrer">使用 Docker 部署 FreshRSS 自建专属 RSS 服务</a></li>
</ul>]]></description>
</item><item>
    <title>常用 youtube-dl 命令</title>
    <link>https://www.techkoala.net/youtube-dl_tricks/</link>
    <pubDate>Tue, 18 May 2021 15:19:43 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/youtube-dl_tricks/</guid>
    <description><![CDATA[<blockquote>
<p>记录一些常用的 youtube-dl 命令，拯救脑容量。</p>
</blockquote>
<h2 id="下载播放列表视频音频" class="headerLink">
    <a href="#%e4%b8%8b%e8%bd%bd%e6%92%ad%e6%94%be%e5%88%97%e8%a1%a8%e8%a7%86%e9%a2%91%e9%9f%b3%e9%a2%91" class="header-mark"></a>下载播放列表视频+音频</h2><p>Windows</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">youtube-dl.exe -o <span class="s2">&#34;D:\xxxxxx\</span><span class="nv">%(title)s.%</span><span class="s2">(ext)s&#34;</span> -f bestvideo+bestaudio https://www.youtube.com/playlist?list=x
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="仅下载播放列表音频" class="headerLink">
    <a href="#%e4%bb%85%e4%b8%8b%e8%bd%bd%e6%92%ad%e6%94%be%e5%88%97%e8%a1%a8%e9%9f%b3%e9%a2%91" class="header-mark"></a>仅下载播放列表音频</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">youtububedl.exe -o D:\<span class="nv">%(title)s.%</span>(ext)s -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 https://www.youtube.com/playlist?list=xxxxxxxxxxxx
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-o D:\%(title)s.%(ext)s     #保留原始名称和后缀
</span></span><span class="line"><span class="cl">-f bestaudio                #最佳音频
</span></span><span class="line"><span class="cl">--extract-audio             #提取音频
</span></span><span class="line"><span class="cl">--audio-format mp3          #设置音频格式，下载文件若不同，则调用ffmpeg转换
</span></span><span class="line"><span class="cl">--playlist-items 1,2,5      #下载播放列表中的哪些项
</span></span><span class="line"><span class="cl">--playstart-start 2         #从第二项开始下载播放列表
</span></span><span class="line"><span class="cl">--playstart-end 2
</span></span><span class="line"><span class="cl">-f &#39;bestvideo[height&lt;=1080]+bestaudio/best[height&lt;=1080]&#39;             #设置最大下载分辨率
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>使用 Nginx 实现多服务复用端口</title>
    <link>https://www.techkoala.net/nginx_port_reuse/</link>
    <pubDate>Tue, 20 Apr 2021 14:17:01 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/nginx_port_reuse/</guid>
    <description><![CDATA[<blockquote>
<p>利用 Nginx 在单一服务器上搭建多个同端口的服务</p>
</blockquote>
<h2 id="说明" class="headerLink">
    <a href="#%e8%af%b4%e6%98%8e" class="header-mark"></a>说明</h2><p>目前服务器上运行以下服务：</p>
<ul>
<li><code>Trojan</code></li>
<li><code>Xray</code></li>
<li><code>frp</code> + <code>Bitwarden</code> 实现内网穿透访问</li>
<li><code>FreshRSS</code></li>
</ul>
<p>三个服务使用了不同域名进行区分，但为了便捷，都使用 <code>443</code> 端口。</p>
<h2 id="流程概览" class="headerLink">
    <a href="#%e6%b5%81%e7%a8%8b%e6%a6%82%e8%a7%88" class="header-mark"></a>流程概览</h2><ol>
<li>采用 <code>Docker</code> 在本地服务器上搭建 <code>Bitwarden</code>，配置并运行 <code>frpc</code> 指向服务器上的 <code>frps</code></li>
<li>在服务器上搭建其他网站或者需要使用 <code>443</code> 端口的服务（如：<code>Trojan</code>)，配置运行 <code>frps</code></li>
<li>采用 <code>Docker</code> 搭建 FreshRSS，首先使用 IP:Port 完成相关配置，然后配置域名，申请证书</li>
<li>安装 <code>Nginx</code>，这里需要利用 <code>Nginx</code> 的 <code>stream_ssl_preread</code> 模块，使用<code>nginx -V</code>查看是否包含该模块。（该模块在 <code>Nginx 1.19.2</code> 已默认包含，但 <code>Ubuntu</code> 等发行版还在使用更老的 <code>stable</code> 版本，需要手动添加 <code>mainline</code> 版本源，并更新 <code>Nginx</code> 到最新版本）</li>
</ol>
<h2 id="获取-ssl-证书" class="headerLink">
    <a href="#%e8%8e%b7%e5%8f%96-ssl-%e8%af%81%e4%b9%a6" class="header-mark"></a>获取 SSL 证书</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo apt install certbot python3-certbot-nginx
</span></span><span class="line"><span class="cl">$ sudo certbot --nginx -d example.com -d www.example.com
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="本地配置文件" class="headerLink">
    <a href="#%e6%9c%ac%e5%9c%b0%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>本地配置文件</h2><h3 id="frpcini" class="headerLink">
    <a href="#frpcini" class="header-mark"></a>frpc.ini</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[common]
</span></span><span class="line"><span class="cl">server_addr = xxx.xxx.xxx.xxx           # 服务器地址
</span></span><span class="line"><span class="cl">server_port = xxx                       # 与服务器 frps 通信的端口
</span></span><span class="line"><span class="cl">token = xxxxxx                          # frp 验证密钥
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[bitwarden_https]
</span></span><span class="line"><span class="cl">type = https
</span></span><span class="line"><span class="cl">local_port = 443
</span></span><span class="line"><span class="cl">custom_domains = xxx.xxx.xxx            # Bitwarden 域名
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="本地-nginxcof" class="headerLink">
    <a href="#%e6%9c%ac%e5%9c%b0-nginxcof" class="header-mark"></a>本地 nginx.cof</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">user www www;
</span></span><span class="line"><span class="cl">worker_processes auto;
</span></span><span class="line"><span class="cl">error_log /var/log/nginx/error.log warn;
</span></span><span class="line"><span class="cl">pid /var/run/nginx.pid;
</span></span><span class="line"><span class="cl">worker_rlimit_nofile 8192;
</span></span><span class="line"><span class="cl">events {
</span></span><span class="line"><span class="cl">    worker_connections 4096;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">http {
</span></span><span class="line"><span class="cl">    include mime.types;
</span></span><span class="line"><span class="cl">    default_type application/octet-stream;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    client_max_body_size 0;
</span></span><span class="line"><span class="cl">    client_body_buffer_size 512k;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    sendfile on;
</span></span><span class="line"><span class="cl">    sendfile_max_chunk 1m;
</span></span><span class="line"><span class="cl">    tcp_nopush on;
</span></span><span class="line"><span class="cl">    tcp_nodelay on;
</span></span><span class="line"><span class="cl">    keepalive_timeout 65;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    types_hash_max_size 4096;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    proxy_cache_path /var/run/nginx-proxy-cache levels=1:2 keys_zone=cache_one:20m inactive=1d max_size=500m;
</span></span><span class="line"><span class="cl">    proxy_cache cache_one;
</span></span><span class="line"><span class="cl">    proxy_temp_path /var/run/proxy_temp_dir;
</span></span><span class="line"><span class="cl">    proxy_temp_file_write_size 128k;
</span></span><span class="line"><span class="cl">    proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;
</span></span><span class="line"><span class="cl">    proxy_buffer_size 16k;
</span></span><span class="line"><span class="cl">    proxy_busy_buffers_size 24k;
</span></span><span class="line"><span class="cl">    proxy_buffers 64 4k;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    gzip on;
</span></span><span class="line"><span class="cl">    gzip_min_length 1k;
</span></span><span class="line"><span class="cl">    gzip_buffers 4 16k;
</span></span><span class="line"><span class="cl">    gzip_http_version 1.1;
</span></span><span class="line"><span class="cl">    gzip_comp_level 2;
</span></span><span class="line"><span class="cl">    gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
</span></span><span class="line"><span class="cl">    gzip_vary on;
</span></span><span class="line"><span class="cl">    gzip_proxied expired no-cache no-store private auth;
</span></span><span class="line"><span class="cl">    gzip_disable &#34;MSIE [1-6]\.&#34;;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    server_tokens off;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    server {
</span></span><span class="line"><span class="cl">        listen 443 ssl http2;
</span></span><span class="line"><span class="cl">        server_name xxx.xxx.xxx;                        # 域名
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        ssl_certificate /xxx/cert/fullchain.pem;        # 证书路径
</span></span><span class="line"><span class="cl">        ssl_certificate_key /xxx/cert/privkey.pem;
</span></span><span class="line"><span class="cl">        ssl_protocols TLSv1.2 TLSv1.3;
</span></span><span class="line"><span class="cl">        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
</span></span><span class="line"><span class="cl">        ssl_prefer_server_ciphers off;
</span></span><span class="line"><span class="cl">        ssl_session_cache shared:SSL:10m;
</span></span><span class="line"><span class="cl">        ssl_session_timeout 1d;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        location / {
</span></span><span class="line"><span class="cl">            proxy_pass http://127.0.0.1:8080;
</span></span><span class="line"><span class="cl">            proxy_set_header Host $host;
</span></span><span class="line"><span class="cl">            proxy_set_header X-Real-IP $remote_addr;
</span></span><span class="line"><span class="cl">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span></span><span class="line"><span class="cl">            proxy_set_header X-Forwarded-Proto $scheme;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        location /notifications/hub {
</span></span><span class="line"><span class="cl">            proxy_pass http://127.0.0.1:3012;
</span></span><span class="line"><span class="cl">            proxy_set_header Upgrade $http_upgrade;
</span></span><span class="line"><span class="cl">            proxy_set_header Connection &#34;upgrade&#34;;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        location /notifications/hub/negotiate {
</span></span><span class="line"><span class="cl">            proxy_pass http://127.0.0.1:8080;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="服务器配置文件" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e5%99%a8%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>服务器配置文件</h2><h3 id="服务器-nginxcof" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e5%99%a8-nginxcof" class="header-mark"></a>服务器 nginx.cof</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">user www-data;
</span></span><span class="line"><span class="cl">worker_processes auto;
</span></span><span class="line"><span class="cl">pid /var/run/nginx.pid;
</span></span><span class="line"><span class="cl">include /etc/nginx/modules-enabled/*.conf;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">events {
</span></span><span class="line"><span class="cl">	worker_connections 768;
</span></span><span class="line"><span class="cl">	# multi_accept on;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">stream {
</span></span><span class="line"><span class="cl">    map $ssl_preread_server_name $name {
</span></span><span class="line"><span class="cl">        xxx.techkoala.net frps-bitwarden;   # Bitwarden 域名
</span></span><span class="line"><span class="cl">        xxx.techkoala.net trojan;           # Trojan 域名
</span></span><span class="line"><span class="cl">        xxx.techkoala.net rss;              # FreshRSS 域名
</span></span><span class="line"><span class="cl">        xxx.techkoala.net xtls;             # Xray 域名
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    upstream frps-bitwarden {
</span></span><span class="line"><span class="cl">        server 127.0.0.1:8080;         # Bitwarden的 frps 端口
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    upstream trojan {
</span></span><span class="line"><span class="cl">        server 127.0.0.1:4443;         # Trojan 本地监听端口
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    upstream rss {
</span></span><span class="line"><span class="cl">        server 172.17.0.1:39955;       # FreshRSS Docker IP 以及映射本地监听端口
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    upstream xtls {
</span></span><span class="line"><span class="cl">        server 127.0.0.1:8443;       # Xray 本地监听端口
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    server {
</span></span><span class="line"><span class="cl">        listen 443 reuseport;
</span></span><span class="line"><span class="cl">        listen [::]:443 reuseport;
</span></span><span class="line"><span class="cl">        proxy_pass	$name;
</span></span><span class="line"><span class="cl">        ssl_preread on;               # 开启 ssl_preread
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">http {
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">	# Basic Settings
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	sendfile on;
</span></span><span class="line"><span class="cl">	tcp_nopush on;
</span></span><span class="line"><span class="cl">	tcp_nodelay on;
</span></span><span class="line"><span class="cl">	keepalive_timeout 65;
</span></span><span class="line"><span class="cl">	types_hash_max_size 2048;
</span></span><span class="line"><span class="cl">	# server_tokens off;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	# server_names_hash_bucket_size 64;
</span></span><span class="line"><span class="cl">	# server_name_in_redirect off;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	include /etc/nginx/mime.types;
</span></span><span class="line"><span class="cl">	default_type application/octet-stream;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">	# SSL Settings
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
</span></span><span class="line"><span class="cl">	ssl_prefer_server_ciphers on;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">	# Logging Settings
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	access_log /var/log/nginx/access.log;
</span></span><span class="line"><span class="cl">	error_log /var/log/nginx/error.log;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">	# Gzip Settings
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	gzip on;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	# gzip_vary on;
</span></span><span class="line"><span class="cl">	# gzip_proxied any;
</span></span><span class="line"><span class="cl">	# gzip_comp_level 6;
</span></span><span class="line"><span class="cl">	# gzip_buffers 16 8k;
</span></span><span class="line"><span class="cl">	# gzip_http_version 1.1;
</span></span><span class="line"><span class="cl">	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">	# Virtual Host Configs
</span></span><span class="line"><span class="cl">	##
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	include /etc/nginx/conf.d/*.conf;
</span></span><span class="line"><span class="cl">	include /etc/nginx/sites-enabled/*;     # 启用的网站配置放置在此文件夹下
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bitwarden-相关配置" class="headerLink">
    <a href="#bitwarden-%e7%9b%b8%e5%85%b3%e9%85%8d%e7%bd%ae" class="header-mark"></a>Bitwarden 相关配置</h3><h4 id="frpsini" class="headerLink">
    <a href="#frpsini" class="header-mark"></a>frps.ini</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[common]
</span></span><span class="line"><span class="cl">bind_port = xxxx                # 与本地 frpc 通信的端口
</span></span><span class="line"><span class="cl">vhost_https_port = xxxx         # 虚拟 https 端口，需要和 nginx.conf 内一致
</span></span><span class="line"><span class="cl">authentication_method = token
</span></span><span class="line"><span class="cl">token = xxxxxx                  # frp 验证密钥
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="bitwarden-nginx-站点配置" class="headerLink">
    <a href="#bitwarden-nginx-%e7%ab%99%e7%82%b9%e9%85%8d%e7%bd%ae" class="header-mark"></a>Bitwarden Nginx 站点配置</h4><p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## Bitwarden 配置。只负责只将 http 重定向至 https
</span></span><span class="line"><span class="cl">## Bitwarden 的 SSL 握手交给本地服务器端的 Nginx 处理
</span></span><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">        listen 80;
</span></span><span class="line"><span class="cl">        listen [::]:80;
</span></span><span class="line"><span class="cl">        server_name xxx.techkoala.net;                    # Bitwarden 域名
</span></span><span class="line"><span class="cl">        return 301 https://xxx.techkoala.net$request_uri; # Bitwarden 域名
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ln -s /etc/nginx/sites-available/xxx.techkoala.net /etc/nginx/sites-enabled/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="trojan-相关配置" class="headerLink">
    <a href="#trojan-%e7%9b%b8%e5%85%b3%e9%85%8d%e7%bd%ae" class="header-mark"></a>Trojan 相关配置</h3><h4 id="trojan-nginx-配置" class="headerLink">
    <a href="#trojan-nginx-%e9%85%8d%e7%bd%ae" class="header-mark"></a>Trojan Nginx 配置</h4><p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">    listen 127.0.0.1:80 default_server;
</span></span><span class="line"><span class="cl">    server_name xxx.techkoala.net;             # 自己的域名
</span></span><span class="line"><span class="cl">    location / {
</span></span><span class="line"><span class="cl">        proxy_pass https://www.digitalocean.com; # 伪装的网站
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">    listen 127.0.0.1:80;
</span></span><span class="line"><span class="cl">    server_name xxx.techkoala.net;                 # 自己服务器的 IP
</span></span><span class="line"><span class="cl">    return 301 https://xxx.techkoala.net$request_uri;  # 自己的域名
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">    listen 0.0.0.0:80;
</span></span><span class="line"><span class="cl">    listen [::]:80;
</span></span><span class="line"><span class="cl">    server_name _;
</span></span><span class="line"><span class="cl">    return 301 https://$host$request_uri;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ln -s /etc/nginx/sites-available/xxx.techkoala.net /etc/nginx/sites-enabled/
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="trojan-配置文件" class="headerLink">
    <a href="#trojan-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>Trojan 配置文件</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">    &#34;run_type&#34;: &#34;server&#34;,
</span></span><span class="line"><span class="cl">    &#34;local_addr&#34;: &#34;0.0.0.0&#34;,
</span></span><span class="line"><span class="cl">    &#34;local_port&#34;: 4443,             # 本地监听端口，与 nginx.conf 保持一致
</span></span><span class="line"><span class="cl">    &#34;remote_addr&#34;: &#34;127.0.0.1&#34;,
</span></span><span class="line"><span class="cl">    &#34;remote_port&#34;: 80,              # 伪装站点的端口
</span></span><span class="line"><span class="cl">    &#34;password&#34;: [
</span></span><span class="line"><span class="cl">        &#34;xxxxxx&#34;                    # 密钥
</span></span><span class="line"><span class="cl">    ],
</span></span><span class="line"><span class="cl">    &#34;log_level&#34;: 1,
</span></span><span class="line"><span class="cl">    &#34;ssl&#34;: {
</span></span><span class="line"><span class="cl">        &#34;cert&#34;: &#34;/usr/local/etc/ssl/certificate.crt&#34;,
</span></span><span class="line"><span class="cl">        &#34;key&#34;: &#34;/usr/local/etc/ssl/private.key&#34;,
</span></span><span class="line"><span class="cl">        &#34;key_password&#34;: &#34;&#34;,
</span></span><span class="line"><span class="cl">        &#34;cipher&#34;: &#34;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&#34;,
</span></span><span class="line"><span class="cl">        &#34;cipher_tls13&#34;: &#34;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&#34;,
</span></span><span class="line"><span class="cl">        &#34;prefer_server_cipher&#34;: true,
</span></span><span class="line"><span class="cl">        &#34;alpn&#34;: [
</span></span><span class="line"><span class="cl">            &#34;http/1.1&#34;
</span></span><span class="line"><span class="cl">        ],
</span></span><span class="line"><span class="cl">        &#34;alpn_port_override&#34;: {
</span></span><span class="line"><span class="cl">            &#34;h2&#34;: 81
</span></span><span class="line"><span class="cl">        },
</span></span><span class="line"><span class="cl">        &#34;reuse_session&#34;: true,
</span></span><span class="line"><span class="cl">        &#34;session_ticket&#34;: false,
</span></span><span class="line"><span class="cl">        &#34;session_timeout&#34;: 600,
</span></span><span class="line"><span class="cl">        &#34;plain_http_response&#34;: &#34;&#34;,
</span></span><span class="line"><span class="cl">        &#34;curves&#34;: &#34;&#34;,
</span></span><span class="line"><span class="cl">        &#34;dhparam&#34;: &#34;&#34;
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    &#34;tcp&#34;: {
</span></span><span class="line"><span class="cl">        &#34;prefer_ipv4&#34;: false,
</span></span><span class="line"><span class="cl">        &#34;no_delay&#34;: true,
</span></span><span class="line"><span class="cl">        &#34;keep_alive&#34;: true,
</span></span><span class="line"><span class="cl">        &#34;reuse_port&#34;: false,
</span></span><span class="line"><span class="cl">        &#34;fast_open&#34;: false,
</span></span><span class="line"><span class="cl">        &#34;fast_open_qlen&#34;: 20
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    &#34;mysql&#34;: {
</span></span><span class="line"><span class="cl">        &#34;enabled&#34;: false,
</span></span><span class="line"><span class="cl">        &#34;server_addr&#34;: &#34;127.0.0.1&#34;,
</span></span><span class="line"><span class="cl">        &#34;server_port&#34;: 3306,
</span></span><span class="line"><span class="cl">        &#34;database&#34;: &#34;trojan&#34;,
</span></span><span class="line"><span class="cl">        &#34;username&#34;: &#34;trojan&#34;,
</span></span><span class="line"><span class="cl">        &#34;password&#34;: &#34;&#34;,
</span></span><span class="line"><span class="cl">        &#34;key&#34;: &#34;&#34;,
</span></span><span class="line"><span class="cl">        &#34;cert&#34;: &#34;&#34;,
</span></span><span class="line"><span class="cl">        &#34;ca&#34;: &#34;&#34;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="freshrss-站点配置" class="headerLink">
    <a href="#freshrss-%e7%ab%99%e7%82%b9%e9%85%8d%e7%bd%ae" class="header-mark"></a>FreshRSS 站点配置</h3><p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">        listen 80;
</span></span><span class="line"><span class="cl">        listen [::]:80;
</span></span><span class="line"><span class="cl">        server_name xxx.techkoala.net;
</span></span><span class="line"><span class="cl">        return 301 https://xxx.techkoala.net$request_uri;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">    listen 39955 ssl http2;          # FreshRSS 本地监听端口
</span></span><span class="line"><span class="cl">    #===注意，nginx 1.25.1之后这里需要修改为
</span></span><span class="line"><span class="cl">    listen 39955 ssl; 
</span></span><span class="line"><span class="cl">    http2 on;
</span></span><span class="line"><span class="cl">    #===
</span></span><span class="line"><span class="cl">    server_name rss.techkoala.net;
</span></span><span class="line"><span class="cl">    ssl_certificate /etc/letsencrypt/live/xxx.techkoala.net/fullchain.pem;
</span></span><span class="line"><span class="cl">    ssl_certificate_key /etc/letsencrypt/live/xxx.techkoala.net/privkey.pem;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    location / {
</span></span><span class="line"><span class="cl">       proxy_pass http://127.0.0.1:39954;   # 转发到 FreshRSS 容器映射的端口
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ln -s /etc/nginx/sites-available/xxx.techkoala.net /etc/nginx/sites-enabled/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="xray" class="headerLink">
    <a href="#xray" class="header-mark"></a>Xray</h3><h4 id="xray-nginx-配置" class="headerLink">
    <a href="#xray-nginx-%e9%85%8d%e7%bd%ae" class="header-mark"></a>Xray Nginx 配置</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">        listen 80;
</span></span><span class="line"><span class="cl">        server_name xxx.techkoala.net;
</span></span><span class="line"><span class="cl">        if ($host = xxxx.techkoala.net) {
</span></span><span class="line"><span class="cl">                return 301 https://$host$request_uri;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        return 404;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">        listen 127.0.0.1:23333;
</span></span><span class="line"><span class="cl">        server_name xxxx.techkoala.net;
</span></span><span class="line"><span class="cl">        location / {
</span></span><span class="line"><span class="cl">                proxy_pass https://www.digitalocean.com; # 伪装的网站
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="xray-配置" class="headerLink">
    <a href="#xray-%e9%85%8d%e7%bd%ae" class="header-mark"></a>Xray 配置</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">    &#34;log&#34;: {
</span></span><span class="line"><span class="cl">        &#34;loglevel&#34;: &#34;warning&#34;
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    &#34;inbounds&#34;: [
</span></span><span class="line"><span class="cl">        {
</span></span><span class="line"><span class="cl">            &#34;listen&#34;: &#34;127.0.0.1&#34;, # 仅监听在本地防止探测到下面的 8443 端口
</span></span><span class="line"><span class="cl">            &#34;port&#34;: 8443, # 这里的端口对应 nginx 主配置文件内的 upstream 端口
</span></span><span class="line"><span class="cl">            &#34;protocol&#34;: &#34;vless&#34;,
</span></span><span class="line"><span class="cl">            &#34;settings&#34;: {
</span></span><span class="line"><span class="cl">                &#34;clients&#34;: [
</span></span><span class="line"><span class="cl">                    {
</span></span><span class="line"><span class="cl">                        &#34;id&#34;: &#34;7f46753a-6a4b-4284-94c0-760340f96f1e&#34;, # 填写你的UUID
</span></span><span class="line"><span class="cl">                        &#34;flow&#34;: &#34;xtls-rprx-direct&#34;,
</span></span><span class="line"><span class="cl">                        &#34;level&#34;: 0
</span></span><span class="line"><span class="cl">                    }
</span></span><span class="line"><span class="cl">                ],
</span></span><span class="line"><span class="cl">                &#34;decryption&#34;: &#34;none&#34;,
</span></span><span class="line"><span class="cl">                &#34;fallbacks&#34;: [
</span></span><span class="line"><span class="cl">                    {
</span></span><span class="line"><span class="cl">                        &#34;dest&#34;: &#34;23333&#34; # 回落站点的端口号，与 Xray Nginx 配置一致
</span></span><span class="line"><span class="cl">                    }
</span></span><span class="line"><span class="cl">                 ]
</span></span><span class="line"><span class="cl">            },
</span></span><span class="line"><span class="cl">            &#34;streamSettings&#34;: {
</span></span><span class="line"><span class="cl">                &#34;network&#34;: &#34;tcp&#34;,
</span></span><span class="line"><span class="cl">                &#34;security&#34;: &#34;xtls&#34;,
</span></span><span class="line"><span class="cl">                &#34;xtlsSettings&#34;: {
</span></span><span class="line"><span class="cl">                    &#34;alpn&#34;: [
</span></span><span class="line"><span class="cl">                        &#34;http/1.1&#34;
</span></span><span class="line"><span class="cl">                    ],
</span></span><span class="line"><span class="cl">                    &#34;certificates&#34;: [
</span></span><span class="line"><span class="cl">                        {
</span></span><span class="line"><span class="cl">                            &#34;certificateFile&#34;: &#34;/usr/local/etc/ssl/fullchain.pem&#34;, # 你的域名证书
</span></span><span class="line"><span class="cl">                            &#34;keyFile&#34;: &#34;/usr/local/etc/ssl/privkey.pem&#34; # 你的证书私钥
</span></span><span class="line"><span class="cl">                        }
</span></span><span class="line"><span class="cl">                    ]
</span></span><span class="line"><span class="cl">                }
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    ],
</span></span><span class="line"><span class="cl">    &#34;outbounds&#34;: [
</span></span><span class="line"><span class="cl">        {
</span></span><span class="line"><span class="cl">            &#34;protocol&#34;: &#34;freedom&#34;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    ]
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="防火墙设置" class="headerLink">
    <a href="#%e9%98%b2%e7%81%ab%e5%a2%99%e8%ae%be%e7%bd%ae" class="header-mark"></a>防火墙设置</h2><p>上述操作后，服务器需要打开<code>80</code>,<code>443</code>,<code>xxx</code>（frp 通信端口）</p>]]></description>
</item><item>
    <title>Vim 小技巧</title>
    <link>https://www.techkoala.net/vim_tips/</link>
    <pubDate>Tue, 19 Jan 2021 19:34:18 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/vim_tips/</guid>
    <description><![CDATA[<blockquote>
<p>记录使用 Vim 时遇到实用的小技巧</p>
</blockquote>
<h2 id="全局命令-global" class="headerLink">
    <a href="#%e5%85%a8%e5%b1%80%e5%91%bd%e4%bb%a4-global" class="header-mark"></a>全局命令 g(lobal)</h2><p>vim 进入文件，命令行模式下执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:[range]global[!]/{pattern}/{command}
</span></span></code></pre></td></tr></table>
</div>
</div><p>也即：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:[range]g/pattern/command
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>[range] 指定文本范围,默认为整个文档</li>
<li>pattern 在范围 range 内的行如果匹配 pattern，则执行 command</li>
<li>! 表示取反，也就是不匹配的行，也可以使用 vglobal</li>
<li>command 默认是打印文本</li>
</ul>
<h3 id="tip1-范围匹配" class="headerLink">
    <a href="#tip1-%e8%8c%83%e5%9b%b4%e5%8c%b9%e9%85%8d" class="header-mark"></a>Tip.1 范围匹配</h3><p>20 行到 200 行之间，每一行下插入空行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:20,200g/^/pu _
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tip2-删除包含字符-pattern-的所有行" class="headerLink">
    <a href="#tip2-%e5%88%a0%e9%99%a4%e5%8c%85%e5%90%ab%e5%ad%97%e7%ac%a6-pattern-%e7%9a%84%e6%89%80%e6%9c%89%e8%a1%8c" class="header-mark"></a>Tip.2 删除包含字符 pattern 的所有行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g/pattern/d
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tip3-删除空白行" class="headerLink">
    <a href="#tip3-%e5%88%a0%e9%99%a4%e7%a9%ba%e7%99%bd%e8%a1%8c" class="header-mark"></a>Tip.3 删除空白行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g/^$/d
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tip4-删除不匹配的行" class="headerLink">
    <a href="#tip4-%e5%88%a0%e9%99%a4%e4%b8%8d%e5%8c%b9%e9%85%8d%e7%9a%84%e8%a1%8c" class="header-mark"></a>Tip.4 删除不匹配的行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g!/pattern/d
</span></span><span class="line"><span class="cl">:v/pattern/d
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tip5-删除大量匹配行" class="headerLink">
    <a href="#tip5-%e5%88%a0%e9%99%a4%e5%a4%a7%e9%87%8f%e5%8c%b9%e9%85%8d%e8%a1%8c" class="header-mark"></a>Tip.5 删除大量匹配行</h3><p>Vim 在删除操作时，会先把要删除的内容放到寄存器中，假如没有指定寄存器，会默认放到一个未命名的寄存器中，对于要删除大量匹配行的行为，可能导致 Vim 花一些时间处理这些拷贝，避免花费不必要的时间可以指定一个 blackhole 寄存器 _</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g/pattern/d_
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tip6-移动匹配的行" class="headerLink">
    <a href="#tip6-%e7%a7%bb%e5%8a%a8%e5%8c%b9%e9%85%8d%e7%9a%84%e8%a1%8c" class="header-mark"></a>Tip.6 移动匹配的行</h3><p>将所有匹配的行移动到文件的末尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g/pattern/m$
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tip7-复制匹配的行" class="headerLink">
    <a href="#tip7-%e5%a4%8d%e5%88%b6%e5%8c%b9%e9%85%8d%e7%9a%84%e8%a1%8c" class="header-mark"></a>Tip.7 复制匹配的行</h3><p>将所有匹配的行复制到文件末尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g/pattern/t$
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tip8-复制到-register-a" class="headerLink">
    <a href="#tip8-%e5%a4%8d%e5%88%b6%e5%88%b0-register-a" class="header-mark"></a>Tip.8 复制到 register a</h3><p>Vim 每个字母都是一个寄存器，所以使用全局命令也可以将内容复制到某一个寄存器，比如 a</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">qaq:g/pattern/y A
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>qaq 清空寄存器 a，qa 开始记录命令到 a 寄存器，q 停止记录</li>
<li>y A 将匹配的行 A (append) 追加到寄存器 a 中
存放到 a 寄存器之后就可以使用 &ldquo;ap 来粘贴使用或者其他操作了</li>
</ul>
<h3 id="tip9-反转文件中的每一行" class="headerLink">
    <a href="#tip9-%e5%8f%8d%e8%bd%ac%e6%96%87%e4%bb%b6%e4%b8%ad%e7%9a%84%e6%af%8f%e4%b8%80%e8%a1%8c" class="header-mark"></a>Tip.9 反转文件中的每一行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g/^/m0
</span></span></code></pre></td></tr></table>
</div>
</div><p>:g 命令一行行匹配，匹配第一行时将第一行 m0 放到文件顶部，第二行放到文件顶部，当跑完一遍之后整个文件的每一行就反转了</p>
<h3 id="tip10-在匹配行后添加文字" class="headerLink">
    <a href="#tip10-%e5%9c%a8%e5%8c%b9%e9%85%8d%e8%a1%8c%e5%90%8e%e6%b7%bb%e5%8a%a0%e6%96%87%e5%ad%97" class="header-mark"></a>Tip.10 在匹配行后添加文字</h3><p>使用 s 命令可以实现，同样使用全局 g 命令也可以实现同样的效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:g/pattern/s/$/mytext
</span></span></code></pre></td></tr></table>
</div>
</div><p>To be continued&hellip;</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="http://einverne.github.io/post/2017/10/vim-global.html" target="_blank" rel="noopener noreferrer">Vim 全局命令 g</a></li>
</ul>]]></description>
</item><item>
    <title>网络分析工具：NetCat</title>
    <link>https://www.techkoala.net/netcat/</link>
    <pubDate>Wed, 19 Aug 2020 23:15:35 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/netcat/</guid>
    <description><![CDATA[<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp" data-sub-html="<h2>网络瑞士军刀 —— NetCat</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp">
    </a><figcaption class="image-caption">网络瑞士军刀 —— NetCat</figcaption>
    </figure>
<h2 id="什么是-netcat" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-netcat" class="header-mark"></a>什么是 NetCat</h2><p>简单来说，NetCat (nc) 是一个命令行工具，能够让你很方便、很灵活地操纵 <code>传输层协议</code>（TCP ＆ UDP）</p>
<p>nc 可以在两台设备上面相互交互，即<code>侦听模式</code>/<code>传输模式</code></p>
<p>nc 包含以下主要功能：</p>
<ul>
<li>Telnet 功能</li>
<li>获取 banner 信息</li>
<li>传输文本信息</li>
<li>传输文件 / 目录</li>
<li>加密传输文件，默认不加密</li>
<li>远程控制</li>
<li>加密所有流量</li>
<li>流媒体服务器</li>
<li>远程克隆硬盘</li>
</ul>
<h2 id="使用-netcat" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-netcat" class="header-mark"></a>使用 NetCat</h2><p>一般来说，nc 的命令行包括如下几个部分：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc 命令选项 主机 端口
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="命令选项" class="headerLink">
    <a href="#%e5%91%bd%e4%bb%a4%e9%80%89%e9%a1%b9" class="header-mark"></a>命令选项</h3><blockquote>
<p>本文内容基于 OpenBSD 社区的变种（也叫 OpenBSD netcat，部分命令与原版有差异。 ）</p>
</blockquote>
<p>下面列举了一些常用选项，更多选项参见 <a href="https://man.openbsd.org/nc.1" target="_blank" rel="noopener noreferrer">OpenBSD manual page</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">选项	   是否有 “选项值”	   说明
</span></span><span class="line"><span class="cl">-h	   NO	           输出 nc 的帮助
</span></span><span class="line"><span class="cl">-v	   NO	           在网络通讯时，显示详细的输出信息
</span></span><span class="line"><span class="cl">-n	   NO	           对命令行中的主机，不进行域名解析，如果主机是 IP 地址，需要用该选项
</span></span><span class="line"><span class="cl">-p	  YES	           指定端口号
</span></span><span class="line"><span class="cl">-l	  NO	           开启监听模式，nc 作为服务端，如不加，nc 默认作为客户端
</span></span><span class="line"><span class="cl">-u	  NO	           使用 UDP 协，如不加该选项，默认是 TCP 协议
</span></span><span class="line"><span class="cl">-w	  YES	           设置连接的超时间隔（N 秒）
</span></span><span class="line"><span class="cl">-q	  YES	           让 nc 延时（N 秒）再退出
</span></span><span class="line"><span class="cl">-z	  NO	           开启 zero-I/O 模式，该选项仅用于端口扫描
</span></span><span class="line"><span class="cl">-k	  NO	           配合 -l 选项使用，可以重复接受客户端连接
</span></span><span class="line"><span class="cl">-X	  YES	           指定代理的类型
</span></span><span class="line"><span class="cl">-x	  YES	           以 IP:port 的格式指定代理
</span></span><span class="line"><span class="cl">-d    NO               后台模式
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="主机" class="headerLink">
    <a href="#%e4%b8%bb%e6%9c%ba" class="header-mark"></a>主机</h3><p>这部分可以没有，可以以 <code>IP 地址</code> 形式表示，也可以以 <code>域名</code> 形式表示。</p>
<h3 id="端口" class="headerLink">
    <a href="#%e7%ab%af%e5%8f%a3" class="header-mark"></a>端口</h3><p>这部分可以没有，可以是单个端口，可以是端口范围。</p>
<h2 id="常用使用场景示例" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af%e7%a4%ba%e4%be%8b" class="header-mark"></a>常用使用场景示例</h2><h3 id="测试某个远程主机的监听端口是否可达" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95%e6%9f%90%e4%b8%aa%e8%bf%9c%e7%a8%8b%e4%b8%bb%e6%9c%ba%e7%9a%84%e7%9b%91%e5%90%ac%e7%ab%af%e5%8f%a3%e6%98%af%e5%90%a6%e5%8f%af%e8%be%be" class="header-mark"></a>测试某个远程主机的监听端口是否可达</h3><p>经常有这种需求，要判断某个主机的监听端口是否能连上。导致监听端口无法连接，通常有两种原因：</p>
<ol>
<li>监听端口没开启</li>
<li>监听端口虽然开启，但是被防火墙阻拦了</li>
</ol>
<p>对第 1 个原因，（如果你能在该主机上运行命令）可以直接用 <code>netstat</code> 这个命令查看监听端口是否开启；但对于第 2 个原因，<code>netstat</code> 就用不上了，这时候就可以用 nc 来帮你搞定。</p>
<p>用如下命令可以测试某个 IP 地址上的某个监听端口是否开启:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -nv ip port
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>注：</strong>　默认情况下 nc 会等待很久，然后才告诉你连接失败。如果你所处的网络环境稳定且高速（比如：局域网内），那么，你可以追加 <code>-w</code> 选项，设置一个比较小的超时值。在下面的例子中，超时值设为 3 秒。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -nv -w <span class="m">3</span> ip port
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="判断防火墙是否允许-or-禁止某个端口" class="headerLink">
    <a href="#%e5%88%a4%e6%96%ad%e9%98%b2%e7%81%ab%e5%a2%99%e6%98%af%e5%90%a6%e5%85%81%e8%ae%b8-or-%e7%a6%81%e6%ad%a2%e6%9f%90%e4%b8%aa%e7%ab%af%e5%8f%a3" class="header-mark"></a>判断防火墙是否允许 or 禁止某个端口</h3><p>假设你正在配置防火墙规则，禁止 TCP 的 8080 端口对外监听。那么，你如何验证自己的配置生效？</p>
<p>为了叙述方便，设想如下场景：
有两台主机 ——<code>主机 C</code> 充当客户端，<code>主机 S</code> 充当服务端。
然后要判断<code>主机 S</code> 上的防火墙是否会拦截其它主机对 8080 TCP 端口的连接。</p>
<p>在<code>主机 S</code> 上运行 nc，让它在 8080 端口，命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -lv -p <span class="m">8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在 “主机 C” 上运行 nc，测试 “主机 S” 上的 8080 端口是否可达</p>
<p><strong>注：</strong>　在默认情况下，nc 开启 listen 模式充当服务端，在接受<strong>第一次</strong>客户端连接之后，就会把监听端口关闭。如果你想要让 nc 始终监听模式，使之能<strong>重复</strong>接受客户端发起的连接，可以追加 <code>-k</code> 选项。</p>
<h3 id="端口扫描" class="headerLink">
    <a href="#%e7%ab%af%e5%8f%a3%e6%89%ab%e6%8f%8f" class="header-mark"></a>端口扫描</h3><p>下面这个命令，用来扫描的端口范围从 1 到 1024</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -znv ip 1-1024
</span></span></code></pre></td></tr></table>
</div>
</div><p>选项 -z
是指开启 <code>zero-I/O 模式</code>。该模式 nc 只判断某个监听端口是否能连上，连上后<strong>不</strong>与对端进行数据通讯。</p>
<p>**注：**端口扫描的时候，<code>-v</code> 选项会把成功/失败的结果统统打印出来。通常关注的都是 “扫描成功” 的那些端口。因此，可以用可以配合使用 <code>grep</code> 过滤一下，只打印扫出来的端口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -znv ip 1-1024  2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep succeeded
</span></span></code></pre></td></tr></table>
</div>
</div><p>此外，由于 <code>-v</code> 选项产生的输出位于 <code>stderr</code>，上述命令中的 <code>2&gt;&amp;1</code> 用来把 <code>stderr</code> 合并到 <code>stdout</code>。</p>
<p><strong>另：</strong> nc 默认超时较大，导致扫描速度较慢。建议根据网络情况合理设置超时值，加快扫描速度。</p>
<h3 id="探测服务器类型和软件版本" class="headerLink">
    <a href="#%e6%8e%a2%e6%b5%8b%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%b1%bb%e5%9e%8b%e5%92%8c%e8%bd%af%e4%bb%b6%e7%89%88%e6%9c%ac" class="header-mark"></a>探测服务器类型和软件版本</h3><p>如果某个服务器运行了 SSH 服务端，那么用如下命令可以看出：该服务器的操作系统类型，以及 SSH server 的版本。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;EXIT&#34;</span> <span class="p">|</span> nc -vq <span class="m">5</span> -n ip <span class="m">22</span>
</span></span><span class="line"><span class="cl">OR
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;EXIT&#34;</span> <span class="p">|</span> nc -vq <span class="m">5</span> domain <span class="m">22</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="端口转发" class="headerLink">
    <a href="#%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91" class="header-mark"></a>端口转发</h3><p>用 nc 进行端口转发，需要运行两个 nc 进程，一个充当<code>服务端</code>，另一个是<code>客户端</code>，然后用管道让把两个进程的<code>标准输入输出``交叉配对</code>。所谓的<code>交叉配对</code>就是——每一个 nc 进程的<code>标准输出</code>都对接到另一个 nc 进程的<code>标准输入</code>。如此一来，就可以完美地建立双向通讯。</p>
<p>步骤 1：创建命名管道</p>
<p>用下面这个简单的命令创建一个 “命名管道”，其名称叫做 nc_pipe</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkfifo nc_pipe
</span></span></code></pre></td></tr></table>
</div>
</div><p>步骤 2：同时启动两个 nc</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -l -p <span class="m">1234</span> &lt; nc_pipe <span class="p">|</span> nc 127.0.0.1 <span class="m">5678</span> &gt; nc_pipe
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行上述命令之后，就可以把本机的 1235 端口重定向到本机的 5678 端口。</p>
<h3 id="传输文件" class="headerLink">
    <a href="#%e4%bc%a0%e8%be%93%e6%96%87%e4%bb%b6" class="header-mark"></a>传输文件</h3><p>为了叙述方便，假设你有两台主机 A 与 B，你要把 A 主机上的文件 file1 传输到 B 主机上，保存为 file2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">先在接收端 B 主机运行如下命令
</span></span><span class="line"><span class="cl">nc -l -p port &gt; file2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">然后在发送端 A 主机运行如下命令
</span></span><span class="line"><span class="cl">nc ip port &lt; file1
</span></span></code></pre></td></tr></table>
</div>
</div><p>两者端口号要相同</p>
<h3 id="远程备份整个磁盘" class="headerLink">
    <a href="#%e8%bf%9c%e7%a8%8b%e5%a4%87%e4%bb%bd%e6%95%b4%e4%b8%aa%e7%a3%81%e7%9b%98" class="header-mark"></a>远程备份整个磁盘</h3><p>假设你要把 A 主机 <code>/dev/sda</code> 磁盘的原始数据整个复制到 B 主机的 <code>/dev/sdb</code> 磁盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">先在接收端（B 主机）运行如下命令
</span></span><span class="line"><span class="cl">nc -lp port <span class="p">|</span> dd <span class="nv">of</span><span class="o">=</span>/dev/sdb
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">然后在发送端 A 主机运行如下命令
</span></span><span class="line"><span class="cl">dd <span class="k">if</span><span class="o">=</span>/dev/sda <span class="p">|</span> nc ip port
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="远程控制" class="headerLink">
    <a href="#%e8%bf%9c%e7%a8%8b%e6%8e%a7%e5%88%b6" class="header-mark"></a>远程控制</h3><p>将 A 主机的 <code>bash</code> 发给 B 主机</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">A:
</span></span><span class="line"><span class="cl">nc -lp port -c bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">B:
</span></span><span class="line"><span class="cl">nc ip port
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="流媒体服务" class="headerLink">
    <a href="#%e6%b5%81%e5%aa%92%e4%bd%93%e6%9c%8d%e5%8a%a1" class="header-mark"></a>流媒体服务</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">A:
</span></span><span class="line"><span class="cl">cat test.mp4 <span class="p">|</span> nc -lp port
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">B:
</span></span><span class="line"><span class="cl">nc -nv ip port <span class="p">|</span> mplayer -vo x11 -cache <span class="m">4000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>A 让 test.MP4 这个文件成为<code>流</code>的形式发送到 B，B 用 mplayer 播放，接收多少播放多少，指定缓存 4000bytes。</p>
<h3 id="信息收集" class="headerLink">
    <a href="#%e4%bf%a1%e6%81%af%e6%94%b6%e9%9b%86" class="header-mark"></a>信息收集</h3><p>收集目标机上的进程信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -l -p port &gt; ps.txt
</span></span><span class="line"><span class="cl">将远程发送过来的内容保存在本地
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Ps aux <span class="p">|</span>nc -nv ip port -q <span class="m">1</span>
</span></span><span class="line"><span class="cl">标准输入完成后 delay 一秒钟，会发送到侦听端
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://man.openbsd.org/nc.1" target="_blank" rel="noopener noreferrer">netcat manual page</a></p>
</li>
<li>
<p>[2] <a href="https://program-think.blogspot.com/2019/09/Netcat-Tricks.html#head-15" target="_blank" rel="noopener noreferrer">扫盲 netcat（网猫）的 N 种用法 —— 从 “网络诊断” 到 “系统入侵”</a></p>
</li>
<li>
<p>[3] <a href="https://www.jianshu.com/p/cb26a0f6c622" target="_blank" rel="noopener noreferrer">NetCat 使用指南</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>利用 Netlify 搭建 Koodo Reader</title>
    <link>https://www.techkoala.net/reader/</link>
    <pubDate>Wed, 12 Aug 2020 11:22:58 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/reader/</guid>
    <description><![CDATA[<blockquote>
<p>搭建自己的在线 EPUB 阅读器</p>
</blockquote>
<h2 id="什么是-netlify" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-netlify" class="header-mark"></a>什么是 Netlify</h2><p>引用 <a href="https://www.netlify.com/" target="_blank" rel="noopener noreferrer">Netlify 官网</a>的介绍：</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Netlify is a unified platform that automates your code to create high-performant, easily maintainable sites and web apps.</div>
        </div>
    </div>
<p>也就是说，<code>Netlify</code> 是一个提供静态网站托管的服务。它提供 <code>CI</code> 服务，能够将托管在 <code>GitHub</code>，<code>GitLab</code> 等网站上代码生成静态网站进行展示。类似于 <code>Github Pages</code>，不过功能更加丰富。</p>
<h2 id="koodo-reader" class="headerLink">
    <a href="#koodo-reader" class="header-mark"></a>Koodo Reader</h2><p><code>Koodo Reader</code> 是一个基于 <code>React</code> 和 <code>Electron</code> 开发的 <code>Epub</code> 阅读器。</p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp" data-sub-html="<h2>Koodo Reader 首页</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp">
    </a><figcaption class="image-caption">Koodo Reader 首页</figcaption>
    </figure>
<p>提供以下功能：</p>
<blockquote>
<p>📝 强大笔记和翻译功能，学习事半功倍</p>
<p>🚩 使用书架来为你的图书分类</p>
<p>🌎 支持 <strong>Windows</strong> ， <strong>MacOS</strong> 和 <strong>网页版</strong></p>
<p>🖥 绑定 <strong>OneDrive</strong>， <strong>Google Drive</strong>， <strong>Dropbox</strong> 等网盘，实现数据的多端同步</p>
<p>💻 您所有的数据都支持导入导出</p>
</blockquote>
<p>更多详情请点击 <a href="https://koodo.960960.xyz/" target="_blank" rel="noopener noreferrer">Koodo Reader 官网</a> 查看。</p>
<h2 id="搭建" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba" class="header-mark"></a>搭建</h2><ol>
<li>首先进入 <a href="https://www.netlify.com/" target="_blank" rel="noopener noreferrer">Netlify 官网</a>，点击注册，这里我选择直接使用 <code>Github</code> 登录，当然，你也可以选择其他方式。</li>
</ol>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp" data-sub-html="<h2>Netlify 注册</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp">
    </a><figcaption class="image-caption">Netlify 注册</figcaption>
    </figure>
<ol start="2">
<li>注册登陆后，进入首页，点击右上角的 <code>New Site from Git</code> ，创建一个新的站点。</li>
</ol>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp" data-sub-html="<h2>创建新站点</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp">
    </a><figcaption class="image-caption">创建新站点</figcaption>
    </figure>
<ol start="3">
<li>接下来，点击下方的 <code>Github</code> 进行授权，这里会弹出一个新的窗口，让你授权 <code>Netlify</code> 访问你的 <code>Github</code> 账户，完成授权后进去下一步。</li>
</ol>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp" data-sub-html="<h2>使用Github 创建新站点</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp">
    </a><figcaption class="image-caption">使用Github 创建新站点</figcaption>
    </figure>
<ol start="4">
<li>这一步会让你选择你将用于生成站点的库，这里我已经提前 Fork <a href="https://github.com/troyeguo/koodo-reader" target="_blank" rel="noopener noreferrer">troyeguo 的 Koodo Reader 库</a>，所以直接选择即可。</li>
</ol>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp" data-sub-html="<h2>选择相应的 Repo</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp">
    </a><figcaption class="image-caption">选择相应的 Repo</figcaption>
    </figure>
<ol start="5">
<li>接着，配置 <code>Build</code> 选项。在该项目的部署中，需要修改 <code>Build name &gt; yarn build</code>，<code>Publish directory &gt; build/ </code>，其他保持默认即可。（如果配置其他项目，这里的参数可能不同，请参考具体项目的指导说明）</li>
</ol>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp" data-sub-html="<h2>配置</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp">
    </a><figcaption class="image-caption">配置</figcaption>
    </figure>
<ol start="6">
<li>到这里，已经完成了整个部署工作，等待 <code>Netlify</code> 构建完成即刻。</li>
</ol>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp" data-sub-html="<h2>配置</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp">
    </a><figcaption class="image-caption">配置</figcaption>
    </figure>
<ol start="7">
<li><code>Netlify</code> 会给你默认分配一个二级域名用于访问，当然也支持自定义域名，这里我绑定了自己域名。除了在此处绑定外，还需要配置 <code>DNS</code> 等等，这个请自行完成。（由于搭建博客时，已经完成了相应设置，因此，我直接在 <code>Cloudfalre</code> 新建了一个 <code>CNAME</code> 指向 <code>Netlify</code> 给我的域名就好了）</li>
</ol>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp" data-sub-html="<h2>配置</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp">
    </a><figcaption class="image-caption">配置</figcaption>
    </figure>
<ol start="8">
<li>大功告成，来<a href="https://reader.techkoala.top/" target="_blank" rel="noopener noreferrer">这里</a>看看书吧。</li>
</ol>
<h2 id="后续" class="headerLink">
    <a href="#%e5%90%8e%e7%bb%ad" class="header-mark"></a>后续</h2><p>如果需要对网站进行更新，只需要关注你的 <code>Github Repo</code> 即可。每次 commit 之后，<code>Netlify</code> 都会自动拉取更新并生成。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="https://github.com/troyeguo/koodo-reader" target="_blank" rel="noopener noreferrer">koodo-reader</a></li>
</ul>]]></description>
</item><item>
    <title>网络测试工具：iPerf</title>
    <link>https://www.techkoala.net/iperf/</link>
    <pubDate>Fri, 07 Aug 2020 17:45:55 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/iperf/</guid>
    <description><![CDATA[<blockquote>
<p>TCP、UDP 和 SCTP 的终极速度测试工具</p>
</blockquote>
<h2 id="什么是-iperf" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-iperf" class="header-mark"></a>什么是 iPerf</h2><p>iPerf 是一个用于测量网络最大带宽的小工具。iPerf 可以测试最大 TCP 和 UDP 带宽性能，具有多种参数和 UDP 特性，可以根据需要调整，可以报告带宽、延迟抖动和数据包丢失。对于每个测试，它都会报告带宽，丢包和其他参数。</p>
<p>现在的版本也称 iPerf3，这是对 NLANR/DAST 开发的原始版本的重新设计。</p>
<p><strong>注意</strong>：iPerf3 与此前版本的 iPerf 不兼容。</p>
<h2 id="安装-iperf" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-iperf" class="header-mark"></a>安装 iPerf</h2><p>iPerf3 官方仅支持 CentOS Linux，FreeBSD 和 macOS，但实际上，<a href="https://iperf.fr/iperf-download.php" target="_blank" rel="noopener noreferrer">官网</a>提供了主流系统的预编译文件。（包括 Windows、Android、iOS、Ubuntu、Arch Linux 等）</p>
<p>类 UNIX 系统直接使用包管理进行安装即可，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo apt install iperf3
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用-iperf" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-iperf" class="header-mark"></a>使用 iPerf</h2><p>首先，介绍服务端和客户端共有的参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-p, --port n      服务器用于侦听和客户端连接的服务器端口，两者应该相同，默认值为 <span class="m">5201</span>
</span></span><span class="line"><span class="cl">--cport n         指定客户端端口
</span></span><span class="line"><span class="cl">-f, --format      用于指定单位显示格式，支持 <span class="s1">&#39;k&#39;</span> <span class="o">=</span> Kbits/sec <span class="s1">&#39;K&#39;</span> <span class="o">=</span> KBytes/sec <span class="s1">&#39;m&#39;</span> <span class="o">=</span> Mbits/sec <span class="s1">&#39;M&#39;</span> <span class="o">=</span> MBytes/sec，默认为自适应格式
</span></span><span class="line"><span class="cl">-i, --interval n  设置测试信息报告之间的间隔时间（以秒为单位）。如果为零，则不打印任何定期报告。默认值为零。
</span></span><span class="line"><span class="cl">-F, --file name   客户端：从文件读取并写入网络，而不是使用随机数据；服务器端：从网络读取并写入文件，而不是丢弃数据。
</span></span><span class="line"><span class="cl">-A, --affinity    如果可以，设置 CPU 关联（仅限 Linux 和 FreeBSD）。
</span></span><span class="line"><span class="cl">-B, --bind host   绑定到主机。对于客户端，这将设置出站接口。对于服务器，这将设置传入接口。这只适用于具有多个网络接口的多宿主主机。
</span></span><span class="line"><span class="cl">-V, --verbose     提供更详细的输出
</span></span><span class="line"><span class="cl">-J, --json        以 JSON 格式输出
</span></span><span class="line"><span class="cl">--logfile file    输出到日志文件
</span></span><span class="line"><span class="cl">--d, --debug      发出调试输出
</span></span><span class="line"><span class="cl">-v, --version     输出版本信息
</span></span><span class="line"><span class="cl">-h, --help        输出帮助信息
</span></span></code></pre></td></tr></table>
</div>
</div><p>服务端特有参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-s, --server      在服务器模式下运行 iPerf（一次只允许一个 iPerf 连接）
</span></span><span class="line"><span class="cl">-D, --daemon      将服务器作为守护进程在后台运行
</span></span><span class="line"><span class="cl">-I, --pidfilefile 使用进程ID编写文件，这在作为守护进程运行时非常有用
</span></span></code></pre></td></tr></table>
</div>
</div><p>客户端特有参数:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-c, --client host	    在客户端模式下运行 iPerf
</span></span><span class="line"><span class="cl">--sctp	                使用 SCTP 而不是 TCP
</span></span><span class="line"><span class="cl">-u, --udp	            使用 UDP 而不是 TCP
</span></span><span class="line"><span class="cl">-b, --bandwidth      	将目标带宽设置为 nbits/sec（对于 UDP 默认为 <span class="m">1</span> Mbit/sec，对于 TCP 为无限制）。如果有多个流（-P 标志），则带宽限制将分别应用于每个流。您还可以在带宽说明符中添加一个 “/” 和一个数字。这称为 “突发模式”。 它会发送给定数量的数据包而不会暂停，即使该数据包暂时超过了指定的带宽限制
</span></span><span class="line"><span class="cl">-t, --time  	        传输的时间（以秒为单位）。iPerf 通常通过在 t 时间内重复发送 len 长度的字节数组来工作。默认值为 <span class="m">10</span> 秒
</span></span><span class="line"><span class="cl">-n, --num 	            要传输的缓冲区数量。通常，iPerf 只会发送 <span class="m">10</span> 秒。-n 选项覆盖此设置，并发送 len 长度字节数组 n 次，无论需要多长时间
</span></span><span class="line"><span class="cl">-k, --blockcount    	要传输的块（数据包）数
</span></span><span class="line"><span class="cl">-l, --length     	    读取或写入的缓冲区的长度，iPerf 通过多次写入 len 个字节的数组来工作。TCP 的默认值为 <span class="m">128</span> KB，UDP 的默认值为 <span class="m">8</span> KB。
</span></span><span class="line"><span class="cl">-P, --parallel  	    与服务器同时建立的连接数，默认值为 <span class="m">1</span>
</span></span><span class="line"><span class="cl">-R, --reverse	        以反向模式运行（服务器发送，客户端接收）
</span></span><span class="line"><span class="cl">-w, --window    	    将套接字缓冲区大小设置为指定值。对于 TCP，这将设置 TCP 窗口大小（这将发送到服务器并在该侧使用）
</span></span><span class="line"><span class="cl">-M, --set-mss  	        尝试设置 TCP 最大段大小（MSS）。MSS 通常是 MTU-TCP/IP 标头的 <span class="m">40</span> 个字节。对于以太网，MSS 为 <span class="m">1460</span> 字节（1500 字节 MTU）
</span></span><span class="line"><span class="cl">-N, --no-delay	        设置 “TCP no delay” 选项，禁用 Nagle 的算法。通常，仅对交互式应用程序（如 telnet）禁用此功能
</span></span><span class="line"><span class="cl">-4, --version4	        仅使用 IPv4.
</span></span><span class="line"><span class="cl">-6, --version4	        仅使用 IPv6.
</span></span><span class="line"><span class="cl">-S, --tos               传出数据包的服务类型。<span class="o">(</span>许多路由器会忽略TOS字段。）可以使用十六进制值（0x）作为前缀，使用八进制数（0）作为前缀，或者使用十进制来指定值。 例如，<span class="s1">&#39;0x10&#39;</span>十六进制<span class="o">=</span><span class="s1">&#39;020&#39;</span>八进制<span class="o">=</span><span class="s1">&#39;16&#39;</span>十进制。RFC 1349中指定的TOS编号为：
</span></span><span class="line"><span class="cl">                        IPTOS_LOWDELAY     minimize delay        0x10
</span></span><span class="line"><span class="cl">                        IPTOS_THROUGHPUT   maximize throughput   0x08
</span></span><span class="line"><span class="cl">                        IPTOS_RELIABILITY  maximize reliability  0x04
</span></span><span class="line"><span class="cl">                        IPTOS_LOWCOST      minimize cost         0x02
</span></span><span class="line"><span class="cl">-L, --flowlabel  	    设置 IPv6 流标签（当前仅在 Linux 上受支持）
</span></span><span class="line"><span class="cl">-Z, --zerocopy	        使用 “零拷贝” 方法发送数据，如 sendfile（2），而不是通常的 write（2）。这样可以占用更少的 CPU
</span></span><span class="line"><span class="cl">-O, --omit  	        省略测试的前 n 秒，以跳过 TCP TCP 慢启动周期
</span></span><span class="line"><span class="cl">-T, --title             为每个输出行添加此字符串前缀
</span></span><span class="line"><span class="cl">-C, --linux-congestion  设置拥塞控制算法 <span class="o">(</span>仅适用于 iPerf 3.1 的 Linux 和 FreeBSD<span class="o">)</span>。
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">从客户端专有选项可以看出，iPerf 默认测试的是从客户端发送到服务端，相对于客户端来说，测试就是上行链路的带宽，对于一般参考意义更大的下行链路需要加上 <code>-R</code> 选项。</div>
        </div>
    </div>
<p>常用启用参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">服务端
</span></span><span class="line"><span class="cl">$ iperf3 -s -p <span class="m">12345</span> -i <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">客户端
</span></span><span class="line"><span class="cl">$ iperf3 -c 192.168.1.43 -p <span class="m">12345</span> -i <span class="m">1</span> -t <span class="m">20</span> -w 100k
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp" data-sub-html="<h2>iPerf 使用实例</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp">
    </a><figcaption class="image-caption">iPerf 使用实例</figcaption>
    </figure>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://iperf.fr/iperf-doc.php" target="_blank" rel="noopener noreferrer">iPerf user docs</a></p>
</li>
<li>
<p>[2] <a href="https://github.com/esnet/iperf" target="_blank" rel="noopener noreferrer">iPerf Github</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>文件传输系列：SFTP</title>
    <link>https://www.techkoala.net/sftp/</link>
    <pubDate>Thu, 06 Aug 2020 14:07:53 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/sftp/</guid>
    <description><![CDATA[<blockquote>
<p>SCP 的继承者</p>
</blockquote>
<h2 id="什么是-sftp" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-sftp" class="header-mark"></a>什么是 SFTP</h2><p>首先需要明确的是，SFTP（SSH File Transfer Protocol）不是运行在 SSH 上的 FTP，而是由 IETF（Internet Engineering Task Force）工作组设计的新协议，将其作为 SSH 2.0 版的扩展，提供安全的文件传输功能。因此，没有单独的 SFTP 端口，而是使用普通的 SSH 端口。协议本身不提供身份验证和安全性，而是期望底层协议提供。</p>
<p>与仅允许文件传输的 SCP 协议相比，SFTP 协议允许对远程文件进行一系列操作，这使其更像远程文件系统协议。SFTP 客户端还支持包括恢复中断的传输，目录列表和远程文件删除等功能。此外，上传的文件可以与它们的基本属性相关联，例如时间戳。相比普通 FTP 协议，这是一项优势。</p>
<p>尽管 SFTP 最常在 Unix 平台上实现，但 SFTP 在主流平台都可用。</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">有关 SFTP 详细草案参见 <a href="https://assets.ctfassets.net/0lvk5dbamxpi/6jBxT5LDgMqutNK4mPTGKd/4fa27cb4a130bca3b48a10c9045b0497/draft-ietf-secsh-filexfer-02" target="_blank" rel="noopener noreferrer">draft-ietf-secsh-filexfer-02</a></div>
        </div>
    </div>
<h2 id="使用-sftp" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-sftp" class="header-mark"></a>使用 SFTP</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sftp 选项 参数
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="选项" class="headerLink">
    <a href="#%e9%80%89%e9%a1%b9" class="header-mark"></a>选项</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-B：指定传输文件时缓冲区的大小；
</span></span><span class="line"><span class="cl">-l：使用 ssh 协议版本 1；
</span></span><span class="line"><span class="cl">-b：指定批处理文件；
</span></span><span class="line"><span class="cl">-C：使用压缩；
</span></span><span class="line"><span class="cl">-o：指定 ssh 选项；
</span></span><span class="line"><span class="cl">-F：指定 ssh 配置文件；
</span></span><span class="line"><span class="cl">-R：指定一次可以容忍多少请求数；
</span></span><span class="line"><span class="cl">-v：升高日志等级。
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="参数" class="headerLink">
    <a href="#%e5%8f%82%e6%95%b0" class="header-mark"></a>参数</h3><p>目标主机：指定 SFTP 服务器 IP 地址或者主机名。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol" target="_blank" rel="noopener noreferrer">SSH File Transfer Protocol</a></p>
</li>
<li>
<p>[2] <a href="https://jaywcjlove.gitee.io/linux-command/c/sftp.html" target="_blank" rel="noopener noreferrer">SFTP Command</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>文件传输系列：rsync</title>
    <link>https://www.techkoala.net/rsync/</link>
    <pubDate>Wed, 05 Aug 2020 20:58:00 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/rsync/</guid>
    <description><![CDATA[<blockquote>
<p>SCP 的另一个绝佳替选</p>
</blockquote>
<h2 id="什么是-rsync" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-rsync" class="header-mark"></a>什么是 rsync</h2><p>rsync (remote synchronize) 是一款实现远程同步功能的软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。</p>
<p>rsync 是<code>类 Unix</code> 系统下的数据镜像备份工具。它能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。 rsync 中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync 可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。</p>
<p>rsync 默认监听 <code>TCP</code> 端口 873，以原生 rsync 传输协议或者透过<code>远程 shell</code> 如 <code>RSH</code> 或者 <code>SSH</code> 提供文件。<code>SSH</code> 模式下，rsync 客户端运行程序必须同时在本地和远程机器上安装。</p>
<h2 id="rsync-算法" class="headerLink">
    <a href="#rsync-%e7%ae%97%e6%b3%95" class="header-mark"></a>rsync 算法</h2><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>信息<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">此部分内容转载 <a href="https://coolshell.cn/articles/7425.html" target="_blank" rel="noopener noreferrer">RSYNC 的核心算法</a></div>
        </div>
    </div>
<p>rsync 的算法如下：（假设源文件名为 <code>fileSrc</code>，目的文件叫 <code>fileDst</code>）</p>
<h3 id="分块-checksum-算法" class="headerLink">
    <a href="#%e5%88%86%e5%9d%97-checksum-%e7%ae%97%e6%b3%95" class="header-mark"></a>分块 Checksum 算法</h3><p>首先，我们会把 <code>fileDst</code> 的文件平均切分成若干个小块，比如每块 512 个字节，然后对<strong>每块</strong>计算<strong>两个</strong> <code>checksum</code>，一个叫 <code>rolling checksum</code>，是<code>弱 checksum</code>，32 位的 <code>checksum</code>，其使用的是 Mark Adler 发明的 <code>adler-32</code> 算法，另一个是<code>强 checksum</code>，128 位的，以前用 <code>md4</code>，现在用 <code>md5</code>。为什么要这样？因为若干年前的硬件上跑 <code>md4</code> 的算法太慢了，所以，需要一个快算法来鉴别文件块的不同，但是弱的 <code>adler-32</code> 算法碰撞概率太高了，所以我们还要引入强的 <code>checksum</code> 算法以保证两文件块是相同的。也就是说，弱的 <code>checksum</code> 是用来区别不同，而强的是用来确认相同。</p>
<h3 id="传输算法" class="headerLink">
    <a href="#%e4%bc%a0%e8%be%93%e7%ae%97%e6%b3%95" class="header-mark"></a>传输算法</h3><p>同步目标端会把 <code>fileDst</code> 的一个 <code>checksum</code> 列表传给同步源，这个列表里包括了三个东西，<code>rolling checksum</code> (32bits)，<code>md5 checksume</code> (128bits)，<code>文件块编号</code>。同步源机器拿到了这个列表后，会对 <code>fileSrc</code> 做同样的 <code>checksum</code>，然后和 <code>fileDst</code> 的 <code>checksum</code> 做对比，这样就知道哪些文件块改变了。</p>
<p><strong>但是</strong></p>
<p>如果我 <code>fileSrc</code> 这边在文件中间加了一个字符，这样后面的文件块都会位移一个字符，这样就完全和 <code>fileDst</code> 这边的不一样了，但理论上来说，我应该只需要传一个字符就好了。这个怎么解决？
如果这个 <code>checksum</code> 列表特别长，而两边相同的文件块可能并不是一样的顺序，那就需要查找，线性的查找起来应该特别慢吧。这个怎么解决？</p>
<h3 id="checksum-查找算法" class="headerLink">
    <a href="#checksum-%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95" class="header-mark"></a>Checksum 查找算法</h3><p>同步源端拿到 <code>fileDst</code> 的 <code>checksum</code> 数组后，会把这个数据存到一个 <code>hash table</code> 中，用 <code>rolling checksum</code> 做 <code>hash</code>，以便获得 <code>O(1)</code> 时间复杂度的查找性能。这个 <code>hash table</code> 是 16 bits 的，所以，<code>hash table</code> 的尺寸是 2 的 16 次方，对 <code>rolling checksum</code> 的 <code>hash</code> 会被散列到 0 到 $ 2^{16} – 1 $ 中的某个整数值。</p>
<h3 id="比对算法" class="headerLink">
    <a href="#%e6%af%94%e5%af%b9%e7%ae%97%e6%b3%95" class="header-mark"></a>比对算法</h3><ol>
<li>
<p>取 <code>fileSrc</code> 的第一个文件块（我们假设的是 512 个长度），也就是从 <code>fileSrc</code> 的第 1 个字节到第 512 个字节，取出来后做 <code>rolling checksum</code> 计算。计算好的值到 <code>hash</code> 表中查询。</p>
</li>
<li>
<p>如果查到了，说明发现在 <code>fileDst</code> 中有潜在相同的文件块，于是就再比较 · 的 <code>checksum</code>，因为 <code>rolling checksume</code> 太弱了，可能发生碰撞。于是还要算 <code>md5</code> 的 128 bits 的 <code>checksum</code>，这样一来，我们就有 $2^{-(32+128)} = 2^{-160} $ 的概率发生碰撞，这小到可以忽略。如果 <code>rolling checksum</code> 和 <code>md5 checksum</code> 都相同，那就可以说明在 <code>fileDst</code> 中有相同的块，记下这一块在 <code>fileDst</code> 下的文件编号。</p>
</li>
<li>
<p>如果 <code>fileSrc</code> 的 <code>rolling checksum</code> 没有在 <code>hash table</code> 中找到，那就不用算 <code>md5 checksum</code> 了。表示这一块中有不同的信息。总之，只要 <code>rolling checksum</code> 或 <code>md5 checksum</code> 其中有一个在 <code>fileDst</code> 的 <code>checksum hash</code> 表中找不到匹配项，那么就会触发算法对 <code>fileSrc</code> 的 rolling 动作。于是，算法会住后 step 1 个字节，取 <code>fileSrc</code> 中字节 2-513 的文件块要做 <code>checksum</code>，然后继续第一步 – 这就是为什么叫 <code>rolling checksum</code> 。</p>
</li>
<li>
<p>这样，我们就可以找出 <code>fileSrc</code> 相邻两次匹配中的那些文本字符，这些就是我们要往同步目标端传的文件内容了。</p>
</li>
</ol>
<h2 id="rolling-checksum-算法" class="headerLink">
    <a href="#rolling-checksum-%e7%ae%97%e6%b3%95" class="header-mark"></a>Rolling Checksum 算法</h2><p>rolling checksum 算法也叫 <code>Rabin-Karp</code> 算法，由 Richard M. Karp 和 Michael O. Rabin 在 1987 年发表，它用来解决多模式串匹配问题。其最大的精髓是，当往后面 step 1 个字符的时候，不用全部重新计算所有的 <code>checksum</code>，也就是说，从 [0, 512] rolling 到 [1, 513] 时，不需要重新计算从 1 到 513 的 <code>checksum</code>，而是重用 [0，512] 的 <code>checksum</code> 直接算出来。</p>
<p>其公式可以表示为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">hash ( t[0, m-1] ) = t[0] * b^(m-1) + t[1] * b^[m-2] ..... t[m-1] * b^0
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中的 b 是一个常数基数，在 Rabin-Karp 算法中，一般取值为 256。</p>
<p>于是，在计算 hash ( t[1, m] ) 时，只需要下面这样就可以了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">hash( t[1, m] ) = hash ( t[0, m-1] ) - t[0] * b^(m-1)  + t[m] * b ^0
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg" data-sub-html="<h2>rsync 算法示意</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/Rsync/rsync-algorithm.jpg">
    </a><figcaption class="image-caption">rsync 算法示意</figcaption>
    </figure>
<p>最终，得到的数据组可以想象为 BT 协议下载 torrent ：一些文件块已下载（匹配上），其他的文件块还未下载（未匹配上）。然后，同步端将这些未匹配上的文件打上标号发送，目的端根据标号重组文件就完成了同步。</p>
<h2 id="使用-rsync" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-rsync" class="header-mark"></a>使用 rsync</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">rsync <span class="o">[</span>OPTION<span class="o">]</span>... SRC DEST
</span></span><span class="line"><span class="cl">rsync <span class="o">[</span>OPTION<span class="o">]</span>... SRC <span class="o">[</span>USER@<span class="o">]</span> host:DEST
</span></span><span class="line"><span class="cl">rsync <span class="o">[</span>OPTION<span class="o">]</span>... <span class="o">[</span>USER@<span class="o">]</span> HOST:SRC DEST
</span></span><span class="line"><span class="cl">rsync <span class="o">[</span>OPTION<span class="o">]</span>... <span class="o">[</span>USER@<span class="o">]</span> HOST::SRC DEST
</span></span><span class="line"><span class="cl">rsync <span class="o">[</span>OPTION<span class="o">]</span>... SRC <span class="o">[</span>USER@<span class="o">]</span> HOST::DEST
</span></span><span class="line"><span class="cl">rsync <span class="o">[</span>OPTION<span class="o">]</span>... rsync://<span class="o">[</span>USER@<span class="o">]</span> HOST <span class="o">[</span>:PORT<span class="o">]</span>/SRC <span class="o">[</span>DEST<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对应于以上六种命令格式，<code>rsync</code> 有六种不同的工作模式：</p>
<ul>
<li>
<p>拷贝本地文件。当 <code>SRC</code> 和 <code>DES</code> 路径信息都<strong>不包含</strong>有单个冒号 &ldquo;:&rdquo; 分隔符时就启动这种工作模式。如：<code>rsync -a /data/backup</code></p>
</li>
<li>
<p>使用一个远程 <code>shell</code> 程序 (如 rsh、ssh) 来实现将本地机器的内容拷贝到远程机器。当 <code>DST</code> 路径地址<strong>包含单个</strong>冒号 &ldquo;:&rdquo; 分隔符时启动该模式。如：<code>rsync -avz *.c foo:src</code></p>
</li>
<li>
<p>使用一个远程 <code>shell</code> 程序 (如 <code>rsh</code>、<code>ssh</code>) 来实现将远程机器的内容拷贝到本地机器。当 <code>SRC</code> 地址路径<strong>包含单个</strong>冒号 &ldquo;:&rdquo; 分隔符时启动该模式。如：<code>rsync -avz foo:src/bar/data</code></p>
</li>
<li>
<p>从远程 <code>rsync</code> 服务器中拷贝文件到本地机。当 <code>SRC</code> 路径信息包含 &ldquo;::&rdquo; 分隔符时启动该模式。如：<code>rsync -av root@192.168.78.192::www /databack</code></p>
</li>
<li>
<p>从本地机器拷贝文件到远程 <code>rsync</code> 服务器中。当 <code>DST</code> 路径信息包含 &ldquo;::&rdquo; 分隔符时启动该模式。如：<code>rsync -av /databack root@192.168.78.192::www</code></p>
</li>
<li>
<p>列出远程主机的文件列表。这类似于 <code>rsync</code> 传输，不过只要在命令中省略掉本地机信息即可。如：<code>rsync -v rsync://192.168.78.192/www</code></p>
</li>
</ul>
<p>可用选项如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-v, --verbose 详细模式输出。
</span></span><span class="line"><span class="cl">-q, --quiet 精简输出模式。
</span></span><span class="line"><span class="cl">-C, --cvs-exclude 使用和 CVS 一样的方法自动忽略文件，用来排除那些不希望传输的文件。
</span></span><span class="line"><span class="cl">-c, --checksum 打开校验开关，强制对文件传输进行校验。
</span></span><span class="line"><span class="cl">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于 - rlptgoD。
</span></span><span class="line"><span class="cl">-r, --recursive 对子目录以递归模式处理。
</span></span><span class="line"><span class="cl">-R, --relative 使用相对路径信息。
</span></span><span class="line"><span class="cl">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为～filename。可以使用 --suffix 选项来指定不同的备份文件前缀。
</span></span><span class="line"><span class="cl">-u, --update 仅仅进行更新，也就是跳过所有已经存在于 DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。
</span></span><span class="line"><span class="cl">-l, --links 保留软链结。
</span></span><span class="line"><span class="cl">-L, --copy-links 想对待常规文件一样处理软链结。
</span></span><span class="line"><span class="cl">-H, --hard-links 保留硬链结。
</span></span><span class="line"><span class="cl">-I, --ignore-times 不跳过那些有同样的时间和长度的文件。
</span></span><span class="line"><span class="cl">-p, --perms 保持文件权限。
</span></span><span class="line"><span class="cl">-o, --owner 保持文件属主信息。
</span></span><span class="line"><span class="cl">-g, --group 保持文件属组信息。
</span></span><span class="line"><span class="cl">-D, --devices 保持设备文件信息。
</span></span><span class="line"><span class="cl">-t, --times 保持文件时间信息。
</span></span><span class="line"><span class="cl">-S, --sparse 对稀疏文件进行特殊处理以节省 DST 的空间。
</span></span><span class="line"><span class="cl">-T --temp-dir<span class="o">=</span>DIR 在 DIR 中创建临时文件。
</span></span><span class="line"><span class="cl">-n, --dry-run 现实哪些文件将被传输。
</span></span><span class="line"><span class="cl">-w, --whole-file 拷贝文件，不进行增量检测。
</span></span><span class="line"><span class="cl">-x, --one-file-system 不要跨越文件系统边界。
</span></span><span class="line"><span class="cl">-B, --block-size<span class="o">=</span>SIZE 检验算法使用的块尺寸，默认是 <span class="m">700</span> 字节。
</span></span><span class="line"><span class="cl">-e, --rsh<span class="o">=</span><span class="nb">command</span> 指定使用 rsh、ssh 方式进行数据同步。
</span></span><span class="line"><span class="cl">-P 等同于 --partial。
</span></span><span class="line"><span class="cl">-z, --compress 对备份的文件在传输时进行压缩处理。
</span></span><span class="line"><span class="cl">-h, --help 显示帮助信息。
</span></span><span class="line"><span class="cl">--backup-dir 将备份文件 <span class="o">(</span>如～filename<span class="o">)</span> 存放在在目录下。
</span></span><span class="line"><span class="cl">-suffix<span class="o">=</span>SUFFIX 定义备份文件前缀。
</span></span><span class="line"><span class="cl">--copy-unsafe-links 仅仅拷贝指向 SRC 路径目录树以外的链结。
</span></span><span class="line"><span class="cl">--safe-links 忽略指向 SRC 路径目录树以外的链结。
</span></span><span class="line"><span class="cl">--rsync-path<span class="o">=</span>PATH 指定远程服务器上的 rsync 命令所在路径信息。
</span></span><span class="line"><span class="cl">--existing 仅仅更新那些已经存在于 DST 的文件，而不备份那些新创建的文件。
</span></span><span class="line"><span class="cl">--delete 删除那些 DST 中 SRC 没有的文件。
</span></span><span class="line"><span class="cl">--delete-excluded 同样删除接收端那些被该选项指定排除的文件。
</span></span><span class="line"><span class="cl">--delete-after 传输结束以后再删除。
</span></span><span class="line"><span class="cl">--ignore-errors 及时出现 IO 错误也进行删除。
</span></span><span class="line"><span class="cl">--max-delete<span class="o">=</span>NUM 最多删除 NUM 个文件。
</span></span><span class="line"><span class="cl">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。
</span></span><span class="line"><span class="cl">--force 强制删除目录，即使不为空。
</span></span><span class="line"><span class="cl">--numeric-ids 不将数字的用户和组 id 匹配为用户名和组名。
</span></span><span class="line"><span class="cl">--timeout<span class="o">=</span><span class="nb">time</span> ip 超时时间，单位为秒。
</span></span><span class="line"><span class="cl">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。
</span></span><span class="line"><span class="cl">--modify-window<span class="o">=</span>NUM 决定文件是否时间相同时使用的时间戳窗口，默认为 0。
</span></span><span class="line"><span class="cl">--compare-dest<span class="o">=</span>DIR 同样比较 DIR 中的文件来决定是否需要备份。
</span></span><span class="line"><span class="cl">--progress 显示备份过程。
</span></span><span class="line"><span class="cl">--exclude<span class="o">=</span>PATTERN 指定排除不需要传输的文件模式。
</span></span><span class="line"><span class="cl">--include<span class="o">=</span>PATTERN 指定不排除而需要传输的文件模式。
</span></span><span class="line"><span class="cl">--exclude-from<span class="o">=</span>FILE 排除 FILE 中指定模式的文件。
</span></span><span class="line"><span class="cl">--include-from<span class="o">=</span>FILE 不排除 FILE 指定模式匹配的文件。
</span></span><span class="line"><span class="cl">--version 打印版本信息。
</span></span><span class="line"><span class="cl">--address 绑定到特定的地址。
</span></span><span class="line"><span class="cl">--config<span class="o">=</span>FILE 指定其他的配置文件，不使用默认的 rsyncd.conf 文件。
</span></span><span class="line"><span class="cl">--port<span class="o">=</span>PORT 指定其他的 rsync 服务端口。
</span></span><span class="line"><span class="cl">--blocking-io 对远程 shell 使用阻塞 IO。
</span></span><span class="line"><span class="cl">-stats 给出某些文件的传输状态。
</span></span><span class="line"><span class="cl">--progress 在传输时现实传输过程。
</span></span><span class="line"><span class="cl">--log-format<span class="o">=</span>formAT 指定日志文件格式。
</span></span><span class="line"><span class="cl">--password-file<span class="o">=</span>FILE 从 FILE 中得到密码。
</span></span><span class="line"><span class="cl">--bwlimit<span class="o">=</span>KBPS 限制 I/O 带宽，KBytes per second。
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://rsync.samba.org/tech_report/tech_report.html" target="_blank" rel="noopener noreferrer">The rsync algorithm</a></p>
</li>
<li>
<p>[2] <a href="https://coolshell.cn/articles/7425.html" target="_blank" rel="noopener noreferrer">RSYNC 的核心算法</a></p>
</li>
<li>
<p>[3] <a href="https://zh.wikipedia.org/wiki/Rsync" target="_blank" rel="noopener noreferrer">rsync wikipedia</a></p>
</li>
<li>
<p>[4] <a href="https://ningyu1.github.io/linux-command/c/rsync.html" target="_blank" rel="noopener noreferrer">rsync command</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>文件传输系列：SCP</title>
    <link>https://www.techkoala.net/scp/</link>
    <pubDate>Sat, 18 Jul 2020 10:28:05 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/scp/</guid>
    <description><![CDATA[<blockquote>
<p>SCP 就是 SSH 协议的文件传输功能吗？</p>
</blockquote>
<h2 id="什么是-scp" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-scp" class="header-mark"></a>什么是 SCP</h2><p>SCP（Secure Copy Protocol，安全复制协议）允许我们在两台计算机之间复制文件（和目录）。</p>
<p>使用起来特别方便：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">$ scp local_file remote_host:/home
</span></span></code></pre></td></tr></table>
</div>
</div><p>这将把本地文件 <code>localfile</code> 复制到远程主机的 <code>/home</code> 文件之下。</p>
<p><code>SCP</code> 使用起来特别便利，因为他能工作在几乎所有的 <code>Unix-like</code> 的系统中，并且 <code>Windows</code> 下拥有许多客户端。但是仅仅复制文件并不是关键。<code>SCP</code> 真正的价值是对 <strong>计算机的身份进行验证</strong> 以及对 <strong>传输文件进行加密</strong>（也就是 S 代表的含义）。</p>
<p>使用前需要首先配置到远程主机的 <code>SSH</code> 连接权限。<code>SCP</code> 的验证提示和 SSH 看起很像，因为 <code>SCP</code> 跑在 <code>SSH</code> 的上层，仅仅把它作为文件数据的管道。事实上，<code>SSH</code> 负责处理所有安全相关的任务，<code>SCP</code> 只是将一些文件扔到 <code>SSH</code> 连接上。</p>
<p>维基百科上的条目讲述了 <code>SCP</code> 的历史，简而言之：在旧的 <code>BSD</code> 系统上曾经有一个叫 <code>RCP</code> 的工具，可以在电脑之间移动文件。在当时受信任的网络时代，每个人都是别人的朋友。后来人们意识到，也许并不是每个人在他们的网络上都是这么好的朋友。于是有人把 <code>RCP</code> 的实现复制到 <code>OpenSSH</code> 的前身上，然后简单地在 <code>SSH</code> 会话上运行它，以保护文件不被非好友发现。问题解决了！从此以后，它就留在了 <code>OpenSSH</code> 中。</p>
<h2 id="scp-工作原理" class="headerLink">
    <a href="#scp-%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" class="header-mark"></a>SCP 工作原理</h2><p><code>SCP</code> 并不是一个标准协议，并没有一个 <code>RFC</code> 或者任何官方描述如何实现它。<code>OpenSSH</code> 实现是一个事实上的规范。此实现有两个部分：连接建立和之后的传输协议。</p>
<h3 id="建立连接" class="headerLink">
    <a href="#%e5%bb%ba%e7%ab%8b%e8%bf%9e%e6%8e%a5" class="header-mark"></a>建立连接</h3><p>实际上，这并不是真正的连接。因为它只是利用 <code>SSH</code> 执行命令后的 <code>STDIN/STDOUT</code> ，有点类似 <code>Unix</code> 管道。<code>OpenSSH</code> 中包含两个程序来完成:<code>sshd</code> 和 <code>scp</code>。<code>sshd</code> 是始终运行的服务器守护进程，接受新的 <code>SSH</code> 连接。<code>SCP</code> 是伪装成 <code>SSH</code> 的客户端程序，发送和接受文件。</p>
<p>当 <code>SCP</code> 运行时，他将开启一个新的 <code>SSH</code> 连接。在该连接上，它会在服务端执行另一个带有特殊标志的 <code>SCP</code> 程序。你可以认为是 <code>ssh exec scp [flags]</code>。主要的标志包含 <code>-t</code>（&ldquo;to&rdquo;）和 <code>-f</code>（&ldquo;from&rdquo;）用于代表接受和发送，而 <code>-d</code> 表示文件夹，<code>-r</code> 表示递归。</p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png" data-sub-html="<h2>建立连接</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-1.png">
    </a><figcaption class="image-caption">建立连接</figcaption>
    </figure>
<p>值得注意的是，<code>SCP</code> 协议是单向的，一端发送文件，另一端接收文件。在远程端 <code>SCP</code> 开始运行后，实际的 <code>SCP</code> 协议命令开始通过 <code>STDIN</code> 和 <code>STDOUT</code> 运行。</p>
<h3 id="传输协议" class="headerLink">
    <a href="#%e4%bc%a0%e8%be%93%e5%8d%8f%e8%ae%ae" class="header-mark"></a>传输协议</h3><p>现在，安全的 I/O 通道建立起来，并且已经有效地切换到 <code>RCP</code> 协议上。该协议是 <strong>顺序</strong>（一次一个操作）和 <strong>同步</strong>（每个命令执行完后才执行下一个命令）执行的。</p>
<p>命令格式大致为（不带括号或空格）：<code>[command type][arguments]\n [optional data]</code></p>
<ul>
<li>
<p>[command type] 通常是一个 ASCII 字符：</p>
<ul>
<li>&lsquo;C&rsquo;- 写入文件</li>
<li>&lsquo;D&rsquo;- 输入目录</li>
<li>&lsquo;E&rsquo;- 退出最后一个目录</li>
<li>&lsquo;T&rsquo;- 设置下一个文件或目录的创建 / 更新时间戳</li>
</ul>
</li>
<li>
<p>[arguments] 是特定于命令的，如文件 / 目录名称、文件大小或时间戳。&ldquo;E&rdquo; 命令没有参数。</p>
</li>
<li>
<p>[optional data] 在上一个命令为 &ldquo;C&rdquo;（创建文件）时发送。数据的大小指定为 &ldquo;C&rdquo; 的参数。</p>
</li>
</ul>
<p>此外，还有控制字节，这些字节是在没有新行的情况下自己发送的：</p>
<ul>
<li>
<p>&lsquo;0x00&rsquo;-&ldquo;OK&rdquo;，确认完成最后一个命令（如编写本地文件）。接收方也会在启动时发送此消息，让发送方知道它已准备好接收命令。</p>
</li>
<li>
<p>&lsquo;0x00&rsquo;-&ldquo;警告&rdquo;，后面是要向用户显示的行（由新行终止）。</p>
</li>
<li>
<p>&lsquo;0x00&rsquo;-&ldquo;错误&rdquo; 后跟随可选消息（和警告相同），但连接随后终止。</p>
</li>
</ul>
<p>下面这个带有注释的图片实例，详细讲述了这个过程：</p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png" data-sub-html="<h2>传输过程</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Software/SCP/scp-2.png">
    </a><figcaption class="image-caption">传输过程</figcaption>
    </figure>
<h2 id="使用-scp" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-scp" class="header-mark"></a>使用 SCP</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ scp 选项 参数
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中选项如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-1：使用ssh协议版本1；
</span></span><span class="line"><span class="cl">-2：使用ssh协议版本2；
</span></span><span class="line"><span class="cl">-4：使用ipv4；
</span></span><span class="line"><span class="cl">-6：使用ipv6；
</span></span><span class="line"><span class="cl">-B：以批处理模式运行；
</span></span><span class="line"><span class="cl">-C：使用压缩；
</span></span><span class="line"><span class="cl">-F：指定ssh配置文件；
</span></span><span class="line"><span class="cl">-l：指定宽带限制；
</span></span><span class="line"><span class="cl">-o：指定使用的ssh选项；
</span></span><span class="line"><span class="cl">-P：指定远程主机的端口号；
</span></span><span class="line"><span class="cl">-p：保留文件的最后修改时间，最后访问时间和权限模式；
</span></span><span class="line"><span class="cl">-q：不显示复制进度；
</span></span><span class="line"><span class="cl">-r：以递归方式复制。
</span></span></code></pre></td></tr></table>
</div>
</div><p>参数分别为：</p>
<ul>
<li>源文件：指定要复制的源文件。</li>
<li>目标文件：格式为 user@host：filename（文件名为目标文件的名称）。</li>
</ul>
<h2 id="scp-的问题" class="headerLink">
    <a href="#scp-%e7%9a%84%e9%97%ae%e9%a2%98" class="header-mark"></a>SCP 的问题</h2><p>看起来，<code>SCP</code> 听起来似乎没什么问题。它是一个简单易用的工具，然而存在一些现实问题。</p>
<h3 id="性能" class="headerLink">
    <a href="#%e6%80%a7%e8%83%bd" class="header-mark"></a>性能</h3><p>传输协议的顺序性：每个命令的强制确认都会增加大量开销。例如，如果沿途丢弃单个确认数据包，则整个连接将暂停，直到重新传输开始。最重要的是，发送所有数据而不压缩或询问接收方是否已经拥有该文件并不理想。</p>
<p>有经验的系统管理员可以告诉您，使用 <code>tar</code> 归档文件并发送比使用 <code>scp</code> 递归命令传输要快得多。事实上，这样的话你甚至无需使用 SCP：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># Copy a local folder with 10000 files</span>
</span></span><span class="line"><span class="cl">$ find /tmp/big_folder/-type f <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="m">10000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Using scp</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">time</span> scp -r -q /tmp/big_folder/server:/tmp/big_folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">________________________________________________________
</span></span><span class="line"><span class="cl">Executed in  882.99 millis	fish       	external
</span></span><span class="line"><span class="cl">   usr <span class="nb">time</span>  114.09 millis	0.00 micros  114.09 millis
</span></span><span class="line"><span class="cl">   sys <span class="nb">time</span>  278.46 millis  949.00 micros  277.51 millis
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Using tar over ssh</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">time</span> sh -c <span class="s2">&#34;tar cf - /tmp/big_folder | ssh server &#39;tar xC /tmp/-f -&#39;&#34;</span>
</span></span><span class="line"><span class="cl">tar: Removing leading <span class="s1">&#39;/&#39;</span> from member names
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">________________________________________________________
</span></span><span class="line"><span class="cl">Executed in  215.68 millis	fish       	external
</span></span><span class="line"><span class="cl">   usr <span class="nb">time</span>   93.22 millis	0.00 micros   93.22 millis
</span></span><span class="line"><span class="cl">   sys <span class="nb">time</span>   66.51 millis  897.00 micros   65.62 millis
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这种比较糟糕的情况下，<code>tar&amp;ssh</code> 的 215.68ms 对比 <code>SCP</code> 的 882.99ms，足足有四倍的速度提升。</p>
<h3 id="安全" class="headerLink">
    <a href="#%e5%ae%89%e5%85%a8" class="header-mark"></a>安全</h3><p>我们已经知道，<code>SCP</code> 靠 <code>SSH</code> 负担安全工作，因此它完全安全&hellip; 吗？</p>
<p><code>OpenSSH</code> 的发行说明提到：</p>
<blockquote>
<p>scp 协议已经过时、不灵活且不容易修复。我们建议使用更现代的协议，如 sftp 和 rsync 来传输文件。</p>
</blockquote>
<p>如果远程端的 <code>shell</code> 打印出任何非交互式会话，则本地 <code>SCP</code> 进程将愉快地将该输出解释为 <code>SCP</code> 命令。好的话，这仅仅是打破 <code>SCP</code> 协议中模糊的错误。但在最坏的情况下，远程 <code>shell</code> 启动脚本是恶意的，并向你发送恶意文件，而不是所需的文件。</p>
<p>此外，早在 2018 年，Harry Sintonen 就发现了流行的 <code>SCP</code> 实现（包括 <code>OpenSSH</code>）中的一堆漏洞。包括从修改目录的权限到覆盖任意文件（由于 <code>～/.ssh/authorized_keys</code> 或 <code>～/.bashrc</code>）、有效地执行代码，以及注入终端转义序列来隐藏任何追踪。这些漏洞对于任何构建网络 <code>CLI</code> 应用程序的人来说都是一个很好的教训。</p>
<h2 id="scp-的替代方案" class="headerLink">
    <a href="#scp-%e7%9a%84%e6%9b%bf%e4%bb%a3%e6%96%b9%e6%a1%88" class="header-mark"></a>SCP 的替代方案</h2><p><code>SFTP</code> 被广泛认为是 <code>SCP</code> 的继承者。为了传输层安全性，它仍然在 <code>SSH</code> 上运行，并且不需要单独设置访问。它可以为您提供一个自定义交互式提示来探索远程文件系统，或者您可以使用预先编写的一系列命令编写脚本。
缺点是，您需要学习 <code>SFTP</code> 提示命令，协议本身尚未完全标准化（有很多 <code>RFC</code> 草稿，但作者最终放弃了）。</p>
<p><code>Rsync</code> 是另一个很好的选择。使用与 <code>SCP</code> 命令完全相同 - 它也利用 <code>SSH</code>。<code>Rsync</code> 着重优化性能 - 它执行大量的复杂本地计算从而通过网络发送尽可能少的数据。从技术上讲，它致力于数据同步而不是纯传输文件 - 如果远程和本地内容相似，则只会发送增量。</p>
<p>同样，它也有其自身的缺点：发送方使用大量的 CPU 资源来计算要发送什么，并且接收方使用大量磁盘 IO 将数据按正确的顺序放在一起。与 <code>OpenSSH</code> 不同，<code>Rsync</code> 在大多数系统上并不预安装。</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>结论</h2><p><code>SCP</code> 是一个简单的工具，它在复制文件方面做得很好，但较新的软件在很多方面都优于它。对于您信任的计算机之间的个人简单使用，<code>SCP</code> 仍然适合。</p>
<p>但是，如果您遇到性能问题或需要满足更高的安全标准，则上面列出的任何备选方案都比 <code>SCP</code> 更可取。选择最适合您需求的，然后试着开始使用。</p>
<h2 id="另见" class="headerLink">
    <a href="#%e5%8f%a6%e8%a7%81" class="header-mark"></a>另见</h2><ul>
<li><a href="/rsync/" rel="">rsync</a></li>
<li><a href="/sftp/" rel="">SFTP</a></li>
</ul>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://gravitational.com/blog/scp-familiar-simple-insecure-slow/" target="_blank" rel="noopener noreferrer">SCP - Familiar, Simple, Insecure, and Slow</a></p>
</li>
<li>
<p>[2] <a href="https://en.wikipedia.org/wiki/Secure_copy" target="_blank" rel="noopener noreferrer">Wikipedia Secure copy</a></p>
</li>
<li>
<p>[3] <a href="https://lists.mindrot.org/pipermail/openssh-unix-dev/2019-March/037672.html" target="_blank" rel="noopener noreferrer">Call for testing: OpenSSH 8.0</a></p>
</li>
<li>
<p>[4] <a href="https://ningyu1.github.io/linux-command/c/scp.html" target="_blank" rel="noopener noreferrer">Scp</a></p>
</li>
</ul>]]></description>
</item></channel>
</rss>
