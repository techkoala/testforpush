<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux - 分类 - TechKoala - Input/Output</title>
        <link>https://www.techkoala.net/categories/linux/</link>
        <description>Linux - 分类 - TechKoala - Input/Output</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>admin@techkoala.net (TechKoala)</managingEditor>
            <webMaster>admin@techkoala.net (TechKoala)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 11 Oct 2024 23:45:31 &#43;0800</lastBuildDate><atom:link href="https://www.techkoala.net/categories/linux/" rel="self" type="application/rss+xml" /><item>
    <title>服务器基础设置</title>
    <link>https://www.techkoala.net/server_setup_basics/</link>
    <pubDate>Fri, 11 Oct 2024 23:45:31 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/server_setup_basics/</guid>
    <description><![CDATA[<blockquote>
<p>翻译一篇服务器基本配置的好文章</p>
</blockquote>
<blockquote>
<p>这是我一直想写的一篇文章。虽然说明如何设置自托管应用程序很简单，但在薄弱的基础上托管应用程序毫无意义。在每篇教程的开头都介绍服务器设置是一件非常麻烦的事，所以我也为自己写了这篇文章，作为我如何为自己托管的应用程序设置服务器的参考。我会从基本的东西开始，比如使用 SSH 正确登录、非根用户设置以及为每个应用程序创建用户。我还会介绍 NGINX 设置、一些让服务器管理更轻松的生活质量工具、日志管理和基本网络安全。</p>
</blockquote>
<h2 id="ssh" class="headerLink">
    <a href="#ssh" class="header-mark"></a>SSH</h2><p>首先是登录。您需要一种安全访问设备的方法。不要使用用户名和密码。你需要使用 SSH（安全外壳），并确保 SSH 是唯一的登录方式。为此，你需要一个 SSH 密钥和一个新的用户账户。在新配置的 VPS 上，你将以根用户身份登录，你需要保护根用户账户。首先在 VPS 或远程机器上创建一个新的普通用户，并将其添加到 &ldquo;sudo &ldquo;组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo adduser techkoala
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo usermod -aG sudo techkoala
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在本地电脑是执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ssh-keygen -t ed25519 -C <span class="s2">&#34;your_email@example.com&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>按照说明操作，它会问你想把文件保存在哪里，以及是否需要密码。请确保设置了字符串密码。要将公钥复制到服务器上，请在本地计算机上运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ssh-copy-id -i ~/.ssh/id_ed25519.pub newuser@your_server_ip
</span></span></code></pre></td></tr></table>
</div>
</div><p>请记住，newuser@your-server-ip 是用户名，也是你要将公钥复制到的远程设备。提示输入密码时，输入的是远程设备上的账户密码，而不是你刚刚为 SSH 密钥设置的密码。一旦验证通过，它就会复制公钥，现在你就可以通过 SSH 登录了。要关闭用户名和密码登录，请键入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo vim /etc/ssh/sshd_config
</span></span></code></pre></td></tr></table>
</div>
</div><p>找到下列值，并按你在这里看到的进行设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Port <span class="m">2222</span>     <span class="c1"># Change default port (use a number between 1024 and 65535)</span>
</span></span><span class="line"><span class="cl">PermitRootLogin no                 <span class="c1"># Disable root login</span>
</span></span><span class="line"><span class="cl">PasswordAuthentication no          <span class="c1"># Disable password authentication</span>
</span></span><span class="line"><span class="cl">PubkeyAuthentication yes           <span class="c1"># Enable public key authentication</span>
</span></span><span class="line"><span class="cl">AuthorizedKeysFile .ssh/authorized_keys <span class="c1"># Specify authorized_keys file location</span>
</span></span><span class="line"><span class="cl">AllowUsers newuser                 <span class="c1"># Only allow specific users to login</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这将禁止除 SSH 之外的所有登录方式，只能通过你复制了公钥的用户登录。停止以 Root 身份登录，只允许你指定的用户登录。点击 CTL+S 保存，点击 CTL+x 退出文件编辑器。重启 SSH：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl restart ssh
</span></span></code></pre></td></tr></table>
</div>
</div><p>这可能会导致你退出 SSH 会话。如果出现这种情况，这时可以测试其他登录方法，看看是否被拒绝，然后再继续。此外，不言而喻，你需要妥善保管私钥，一旦丢失，你将无法再远程登录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Protocol <span class="m">2</span>                 <span class="c1"># Use only SSH protocol version 2</span>
</span></span><span class="line"><span class="cl">MaxAuthTries <span class="m">3</span>             <span class="c1"># Limit authentication attempts</span>
</span></span><span class="line"><span class="cl">ClientAliveInterval <span class="m">300</span>    <span class="c1"># Client alive interval in seconds</span>
</span></span><span class="line"><span class="cl">ClientAliveCountMax <span class="m">2</span>      <span class="c1"># Maximum client alive count</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在，让我们再深入研究一下用户，看看如何利用他们来提高组织性和安全性。</p>
<h2 id="users" class="headerLink">
    <a href="#users" class="header-mark"></a>Users</h2><p>在管理 Linux 服务器时，用户非常重要。服务器管理中有一个理念叫做 &ldquo;最小权限原则&rdquo;，其基本意思是，你要给予应用程序或进程完成工作所需的最小权限。Root 拥有无限的权限，没有应用程序真正需要它。为正在运行的应用程序设置用户权限有几个好处。如果正在运行的应用程序受到威胁，它可以限制潜在的损害。当运行多个应用程序时，它可以增加隔离性，有助于审计，让你知道哪些应用程序正在使用哪些系统资源。</p>
<p>简而言之，用户是组织系统的好帮手，在出现问题时能帮助你排除故障。要添加新用户，请运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo useradd -rms /usr/sbin/nologin -c <span class="s2">&#34;a comment&#34;</span> youruser
</span></span></code></pre></td></tr></table>
</div>
</div><p>该命令将创建一个用户，并为其提供一个存放应用程序数据的主目录，但不允许以该用户身份登录。-c标志是可选的，但最好能知道用户的用途，如 &ldquo;运行 Nextcloud &ldquo;之类。将应用程序文件克隆到 /opt 目录中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo mkdir /opt/myapp
</span></span></code></pre></td></tr></table>
</div>
</div><p>该命令会创建一个用户，并为其提供一个存放应用程序数据的主目录，但不允许以该用户身份登录。-c标志是可选的，但最好能知道用户的用途，如 &ldquo;运行 Nextcloud &ldquo;之类。将应用程序文件克隆到 /opt 目录中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo chown appuser:appuser /opt/myapp
</span></span></code></pre></td></tr></table>
</div>
</div><p>好了，这样就锁定了你的登录，你也应该对如何使用用户有了一定的了解。接下来是日志。</p>
<h2 id="logs" class="headerLink">
    <a href="#logs" class="header-mark"></a><strong>Logs</strong></h2><p>日志对系统管理至关重要。它们可以跟踪系统健康状况，帮助排除故障和检测威胁。因此，你需要设置适当的日志轮换，这样日志就不会占用系统太多空间，而且更易于阅读和管理。要设置正确的日志轮换，需要编辑位于 /etc 目录下的 logrotate.conf 文件。单个应用程序的配置通常存储在 /etc/logrotate.d/，因此 NGINX 的配置示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/var/log/nginx/*.log <span class="o">{</span>
</span></span><span class="line"><span class="cl">    weekly
</span></span><span class="line"><span class="cl">    missingok
</span></span><span class="line"><span class="cl">    rotate <span class="m">52</span>
</span></span><span class="line"><span class="cl">    compress
</span></span><span class="line"><span class="cl">    delaycompress
</span></span><span class="line"><span class="cl">    notifempty
</span></span><span class="line"><span class="cl">    create <span class="m">0640</span> www-data adm
</span></span><span class="line"><span class="cl">    sharedscripts
</span></span><span class="line"><span class="cl">    postrotate
</span></span><span class="line"><span class="cl">        <span class="o">[</span> -f /var/run/nginx.pid <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">kill</span> -USR1 <span class="sb">`</span>cat /var/run/nginx.pid<span class="sb">`</span>
</span></span><span class="line"><span class="cl">    endscript
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>该配置每周轮换日志，保留 52 周的日志，压缩旧日志，以正确的权限创建新日志，然后在轮换后向 NGINX 发出信号以重新打开日志文件。您可以使用以下配置进行测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo logrotate -d /etc/logrotate.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>这将显示它在不实际旋转日志的情况下会做什么。有了这些设置，你就可以开始做更高级的事情了，比如根据日志条目触发警报。现在，这对单台服务器来说还算不错，但如果你管理的服务器不止一台，最好还是了解一下 Grafana Loki、Graylog 和 Fluentd 等工具。在此我就不详细介绍了，但如果你想提高你的日志游戏水平，这些都是不错的起点。</p>
<h2 id="backups" class="headerLink">
    <a href="#backups" class="header-mark"></a><strong>Backups</strong></h2><p>备份，更重要的是测试备份，在服务器管理中极其重要。请记住：除非经过测试，否则备份就不是备份。未经测试的备份基本上是无用的。</p>
<p>备份主要有三种类型。完全备份、差异备份和增量备份。完全备份是磁盘上所有数据的完整副本。这种备份占用资源最多，但最容易恢复。差异备份备份的是上次完整备份后的所有变化，这是一种在空间和恢复速度上都处于中间位置的备份策略。增量备份备份自上次备份后发生变化的数据，这是最快的备份方式，但恢复起来可能最复杂。</p>
<p>我是这样想的。我使用增量备份来备份照片、文档或项目文件和经常编辑的文件夹。我会使用完全备份来备份整个服务器或磁盘。差异备份用于备份完整文件夹，如 /etc、/opt 和日志文件夹。</p>
<p>现在该如何存储呢？如果您遵循 3-2-1 原则，您就会如虎添翼。3 份数据副本、2 种存储类型和 1 个异地备份。我想说的是，如果这看起来太多，那么 &ldquo;异地 &ldquo;存储是最重要的，不能省略。万一发生灾难性的数据崩溃，拥有一个带有备份的硬盘是非常宝贵的。异地/离线备份还能让您免受勒索软件的威胁。因此，请牢记这一点。现在有大量的备份软件。我使用 Sync-thing、Borg 备份和老式 FTP 的组合。</p>
<p>请记住，备份、日志和服务器监控是一个根据您的需求不断发展的过程。您实施的具体策略应符合您的需求和数据的关键性。</p>
<h2 id="basic-network-safety" class="headerLink">
    <a href="#basic-network-safety" class="header-mark"></a><strong>Basic Network Safety</strong></h2><p>保护服务器安全的下一步是锁定那些不需要暴露在互联网上的端口，并禁止那些在不应该登录的情况下尝试登录的东西。UFW 和 Fail2Ban 是目前广泛使用的两种工具。它们简单易用，UFW 可让你为端口设置流量规则，而 Fail2Ban 则会在 IP 地址进入不应进入的端口或在某些预定义规则后仍无法登录时将其封禁。UFW 或不复杂的防火墙通常会预装在许多 VPS 服务中，Fail2Ban 也是如此，但如果你使用的是新机器且不确定，请运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install ufw
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt install fail2ban
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ufw" class="headerLink">
    <a href="#ufw" class="header-mark"></a><strong>UFW</strong></h3><p>关于 Fail2Ban，我们稍后再讨论，现在让我们重点讨论 UFW 设置。首先运行一些默认策略：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo ufw default deny incoming
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">sudo ufw allow outgoing
</span></span></code></pre></td></tr></table>
</div>
</div><p>这被认为是最佳做法，因为它遵循了我前面提到的 &ldquo;最少权限 &ldquo;理念。它减少了机器的攻击面，让你可以精确控制暴露的内容。简而言之，这种配置在安全性和功能性之间取得了平衡。你的服务器可以根据需要接入互联网，但外部实体只能通过你明确允许的方式连接到你的服务器。现在，让我们允许一些东西进入。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo ufw allow ssh
</span></span><span class="line"><span class="cl">sudo ufw allow <span class="m">80</span>
</span></span><span class="line"><span class="cl">sudo ufw allow <span class="m">443</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果要运行网络服务器，则需要打开 80 端口和 443 端口。80 端口用于 HTTP，443 端口用于 HTTPS。默认情况下，22 端口是 SSH，如果更改了端口，则需要指定端口，而不是使用 &ldquo;allow ssh &ldquo;命令。下面是其他一些有用的命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#List rules with numbers:</span>
</span></span><span class="line"><span class="cl">sudo ufw status numbered
</span></span><span class="line"><span class="cl"><span class="c1">#Delete by number:</span>
</span></span><span class="line"><span class="cl">sudo ufw delete NUMBER
</span></span><span class="line"><span class="cl"><span class="c1">#Delete by rule specification:</span>
</span></span><span class="line"><span class="cl">sudo ufw delete allow <span class="m">80</span>
</span></span><span class="line"><span class="cl"><span class="c1">#You can allow connections from specific IP addresses:</span>
</span></span><span class="line"><span class="cl">sudo ufw allow from 192.168.1.100
</span></span><span class="line"><span class="cl"><span class="c1">#You can also only allow an IP to connect to a specfic port with: </span>
</span></span><span class="line"><span class="cl">sudo ufw allow from 192.168.1.100 to any port <span class="m">22</span>
</span></span><span class="line"><span class="cl"><span class="c1">#If you neeed to allow a range of ports: </span>
</span></span><span class="line"><span class="cl">sudo ufw allow 6000:6007/tcp
</span></span><span class="line"><span class="cl"><span class="c1">#To further protect from brut force attacks you can rate limit specific ports with: </span>
</span></span><span class="line"><span class="cl">sudo ufw limit ssh
</span></span><span class="line"><span class="cl"><span class="c1">#This would limit port 22 to 6 connections in 30 seconds from a single IP. To see the status of the firewall you can use: </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Adding this goves you more info</span>
</span></span><span class="line"><span class="cl">sudo ufw status verbose
</span></span><span class="line"><span class="cl"><span class="c1">#and to reset incase you need to start over: </span>
</span></span><span class="line"><span class="cl">sudo ufw reset
</span></span><span class="line"><span class="cl"><span class="c1">#and to enable and disable: </span>
</span></span><span class="line"><span class="cl">sudo ufw <span class="nb">enable</span> 
</span></span><span class="line"><span class="cl">sudo ufw disable 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#finaly to enable logging and adjusting the log level: </span>
</span></span><span class="line"><span class="cl">sudo ufw logging on
</span></span><span class="line"><span class="cl">sudo ufw logging medium <span class="c1"># levels are low, medium, high, full </span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在开始 Fail2Ban。</p>
<h3 id="fail2ban" class="headerLink">
    <a href="#fail2ban" class="header-mark"></a><strong>Fail2Ban</strong></h3><p>主要配置文件位于 /etc/fail2ban/jail.conf，但建议创建本地配置文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo nano /etc/fail2ban/jail.local
</span></span></code></pre></td></tr></table>
</div>
</div><p>jail.local 部分的[DEFAULT]部分有一些基本设置，它们是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">bantime</span> <span class="o">=</span> 10m
</span></span><span class="line"><span class="cl"><span class="nv">findtime</span> <span class="o">=</span> 10m
</span></span><span class="line"><span class="cl"><span class="nv">maxretry</span> <span class="o">=</span> <span class="m">5</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>封禁时间是指 IP 被封禁的时间。查找时间是 Fail2Ban 寻找重复失败的时间范围，最大重试次数是 IP 被禁用前的失败次数。您可以根据需要调整这些参数。您还可以设置自定义封禁，Fail2Ban 也支持 SSH 等常用服务的封禁。您还可以采取更多步骤，但我认为这已经涵盖了基本内容。</p>
<h3 id="nginx" class="headerLink">
    <a href="#nginx" class="header-mark"></a><strong>NGINX</strong></h3><p>您可以使用的网络服务器有很多。Apache, Caddy, nginx, IIS 等等。我使用 Nginx。这是我所熟悉的，而且它运行得非常好。Nginx（发音为 engine-x）是一个网络服务器、反向代理和负载平衡器。作为 Web 服务器，它擅长提供静态内容，并能以相当低的资源占用率处理大量并发连接。作为反向代理，它可以位于应用程序服务器之前，将流量转发给它们，同时确保应用程序的安全。它的负载平衡功能可有效平衡服务器之间的流量，提高可靠性和可扩展性。</p>
<p>通过 apt 安装时，nginx 的默认位置是 /etc/nginx/，nginx.conf 主要用于全局服务器配置，包括 /etc/nginx/sites-enabled 文件夹中的文件。这种模块化结构便于管理多个站点。需要注意的两个文件夹是 sites-enabled 文件夹和 sites-available 文件夹。您可以将可用站点视为测试站点配置的暂存区，而启用站点则用于实时站点和应用程序。常见的做法是在可用站点中的站点中设置和测试配置，然后当你准备上线并获得 SSL 证书时，将文件链接到启用站点文件夹。具体方法如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ln -s /etc/nginx/sites-available/yoursitefile /etc/nginx/sites-enabled
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后重新加载nginx，并再次检查nginx状态：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl reload nginx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl status nginx
</span></span></code></pre></td></tr></table>
</div>
</div><p>您的网站现在应该已经上线。</p>
<p>下面，我将向您展示一些模板化的 Nginx 网站配置。请务必考虑您的应用程序或网站需求，因为这些只是起点。对于静态网站，这是一个不错的起点。</p>
<p>基本静态网站配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">server <span class="o">{</span>
</span></span><span class="line"><span class="cl">    listen 80<span class="p">;</span>
</span></span><span class="line"><span class="cl">    listen <span class="o">[</span>::<span class="o">]</span>:80<span class="p">;</span>
</span></span><span class="line"><span class="cl">    server_name example.com www.example.com<span class="p">;</span>
</span></span><span class="line"><span class="cl">    root /var/www/example.com/html<span class="p">;</span>
</span></span><span class="line"><span class="cl">    index index.html index.htm<span class="p">;</span>
</span></span><span class="line"><span class="cl">    location / <span class="o">{</span>
</span></span><span class="line"><span class="cl">        try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Security headers</span>
</span></span><span class="line"><span class="cl">    add_header X-Frame-Options <span class="s2">&#34;SAMEORIGIN&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header X-XSS-Protection <span class="s2">&#34;1; mode=block&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header X-Content-Type-Options <span class="s2">&#34;nosniff&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header Referrer-Policy <span class="s2">&#34;no-referrer-when-downgrade&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header Content-Security-Policy <span class="s2">&#34;default-src &#39;self&#39; http: https: data: blob: &#39;unsafe-inline&#39;&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Logging</span>
</span></span><span class="line"><span class="cl">    access_log /var/log/nginx/example.com.access.log<span class="p">;</span>
</span></span><span class="line"><span class="cl">    error_log /var/log/nginx/example.com.error.log warn<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># SSL configuration (uncomment after running Certbot)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># listen 443 ssl http2;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># listen [::]:443 ssl http2;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_protocols TLSv1.2 TLSv1.3;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_prefer_server_ciphers on;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Certbot will add its own SSL certificate paths</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代理通行证配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">server <span class="o">{</span>
</span></span><span class="line"><span class="cl">    listen 80<span class="p">;</span>
</span></span><span class="line"><span class="cl">    listen <span class="o">[</span>::<span class="o">]</span>:80<span class="p">;</span>
</span></span><span class="line"><span class="cl">    server_name app.example.com<span class="p">;</span>
</span></span><span class="line"><span class="cl">    location / <span class="o">{</span>
</span></span><span class="line"><span class="cl">        proxy_pass http://localhost:3000<span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Security headers</span>
</span></span><span class="line"><span class="cl">    add_header X-Frame-Options <span class="s2">&#34;SAMEORIGIN&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header X-XSS-Protection <span class="s2">&#34;1; mode=block&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header X-Content-Type-Options <span class="s2">&#34;nosniff&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header Referrer-Policy <span class="s2">&#34;no-referrer-when-downgrade&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header Content-Security-Policy <span class="s2">&#34;default-src &#39;self&#39; http: https: data: blob: &#39;unsafe-inline&#39;&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Logging</span>
</span></span><span class="line"><span class="cl">    access_log /var/log/nginx/app.example.com.access.log<span class="p">;</span>
</span></span><span class="line"><span class="cl">    error_log /var/log/nginx/app.example.com.error.log warn<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># SSL configuration (uncomment after running Certbot)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># listen 443 ssl http2;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># listen [::]:443 ssl http2;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_protocols TLSv1.2 TLSv1.3;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_prefer_server_ciphers on;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Certbot will add its own SSL certificate paths</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>WebSocket 升级配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">server <span class="o">{</span>
</span></span><span class="line"><span class="cl">    listen 80<span class="p">;</span>
</span></span><span class="line"><span class="cl">    listen <span class="o">[</span>::<span class="o">]</span>:80<span class="p">;</span>
</span></span><span class="line"><span class="cl">    server_name ws.example.com<span class="p">;</span>
</span></span><span class="line"><span class="cl">    location / <span class="o">{</span>
</span></span><span class="line"><span class="cl">        proxy_pass http://localhost:8080<span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_http_version 1.1<span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header Upgrade <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header Connection <span class="s2">&#34;upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Security headers</span>
</span></span><span class="line"><span class="cl">    add_header X-Frame-Options <span class="s2">&#34;SAMEORIGIN&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header X-XSS-Protection <span class="s2">&#34;1; mode=block&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header X-Content-Type-Options <span class="s2">&#34;nosniff&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header Referrer-Policy <span class="s2">&#34;no-referrer-when-downgrade&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">    add_header Content-Security-Policy <span class="s2">&#34;default-src &#39;self&#39; http: https: data: blob: &#39;unsafe-inline&#39;&#34;</span> always<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># WebSocket timeout settings</span>
</span></span><span class="line"><span class="cl">    proxy_read_timeout 300s<span class="p">;</span>
</span></span><span class="line"><span class="cl">    proxy_send_timeout 300s<span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Logging</span>
</span></span><span class="line"><span class="cl">    access_log /var/log/nginx/ws.example.com.access.log<span class="p">;</span>
</span></span><span class="line"><span class="cl">    error_log /var/log/nginx/ws.example.com.error.log warn<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># SSL configuration (uncomment after running Certbot)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># listen 443 ssl http2;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># listen [::]:443 ssl http2;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_protocols TLSv1.2 TLSv1.3;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_prefer_server_ciphers on;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Certbot will add its own SSL certificate paths</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_certificate /etc/letsencrypt/live/ws.example.com/fullchain.pem;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ssl_certificate_key /etc/letsencrypt/live/ws.example.com/privkey.pem;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>基本配置用于为简单的静态网站提供服务。它指定了域名，IPv4 和 IPv6 都使用 80 端口监听，设置了网站的根目录，使用 try_files 配置了错误处理，添加了一些防止常见网络漏洞的基本标头，设置了访问和错误日志，还包括一个注释掉的 SSL 部分。大部分 SSL 配置将由 certbot 处理，但其中有几行添加了一些 SSL 安全性，可以在运行 certbot 后取消注释。</p>
<p>代理通行配置与基本配置类似，但它不是直接提供文件，而是将请求代理到本地应用程序（在本例中，运行于 3000 端口）。</p>
<p>第三个配置文件面向需要网站连接的应用程序，它与代理通行证配置很相似，只是在允许网络套接字方面做了一些改动。</p>
<p>如果不谈 SSL，任何有关网络服务器的内容都是不完整的。对于普通用户来说，certbot 是他们最好的朋友。它免费，速度快，还他妈的好用。我使用的是 python 版本的 certbot。安装方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install certbot python3-certbot-nginx
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装完成后，你只需在终端运行 &ldquo;certbot&rdquo;，它就会检测你的站点启用文件夹中的配置，并询问你要做什么（续费、重发等&hellip;&hellip;）。按照 certbot 提供的步骤操作就可以了，非常简单。</p>
<p>因此，现在 certbot 在获取新证书时会为你设置自动续费，所以这只是个 &ldquo;坐等 &ldquo;任务。但为了确保成功，你可以运行</p>
<p>如果运行正常，使用 systemd 的用户就可以放心使用了。</p>
<h2 id="quality-of-life-tools" class="headerLink">
    <a href="#quality-of-life-tools" class="header-mark"></a><strong>Quality Of Life Tools</strong></h2><p>关于 &ldquo;让系统管理更轻松的工具 &ldquo;这个话题，我将介绍一些我在服务器上使用的工具，我认为它们能让管理变得更轻松。我不会深入介绍任何工具。所有这些都是可选的，没有特定的顺序。其中很多都是我在网站上找到的，如果你和我一样是个终端迷，那么这个网站很值得浏览。</p>
<p>第一个工具，这是我的个人必备清单。Btop 是一款资源终端监控器。它能实时显示电脑的 CPU、内存、磁盘、网络和运行附魔的可视化使用统计信息，它由 C++ 编写，可通过大多数软件包管理器安装。</p>
<p>对于有大量外部连接的服务器（如 nostr 中继站），类似的工具很有帮助。Neoss 的目标是取代常用的 ss 命令，满足基本使用需求。它提供了一个使用中的 TCP 和 UDP 套接字列表及其各自的统计信息。与 SS 原始输出相比，它的主要优势在于清晰简洁的 TUI（终端用户界面），允许你对连接到机器的内容进行排序、刷新和导航。它通过 NPM 安装，这意味着你需要安装 JavaScript。</p>
<p>是一款基于终端的网络服务器日志分析器。它非常适合在终端上快速实时查看日志，还能实时生成 HTML、JSON 和 CSV 报告。GoAccess 可通过大多数软件包管理器安装，适用于所有平台。</p>
<p>接下来要介绍的是 Its，它是一款功能强大的基于文本的文件管理器，具有双面显示屏和许多操作文件和目录的功能。它还具有跨平台特性，可通过大多数软件包管理器进行安装。</p>
<p>与服务器文件管理同属一个主题的是 .NET Framework。这是我的必备清单。它是一款磁盘使用分析器，专门用于查找占用空间的文件。它运行速度快，操作简单。它可以安装在大多数系统和软件包管理器上。Windows 需要安装 Linux 子系统才能使用它。</p>
<p>希望你能从中找到一些有用的东西。我想谈的最后一个话题是 DNS，这是个比较大的话题，所以我不会做大规模的深入探讨，但如果你是自助托管，掌握一些 DNS 的基本知识还是有帮助的。</p>
<h2 id="dns" class="headerLink">
    <a href="#dns" class="header-mark"></a><strong>DNS</strong></h2><p>DNS 或域名系统是我们所熟知的互联网运作方式的核心部分。不管你喜欢还是讨厌，如果你想访问更广泛的互联网，我们就必须使用它。(我不喜欢它现在的样子，但我不会在这里说这个）。基本上，把 DNS 想象成电话簿。它可以让你在每次需要搜索互联网时输入 duckduckgo.com，而不是 &ldquo;52.250.42.157&rdquo;。它将人类容易记住的东西转化为计算机所需的信息，从而真正到达 &ldquo;duckduckgo.com&rdquo;。</p>
<p>如果您使用的是 VPS 主机，您唯一需要知道的就是在决定使用某个域名后，如何将 A 记录指向您的服务器 IP。几乎所有的 VPS 主机都可以为你提供一个静态 IP，所以这主要是一种设置和遗忘类型的交易。</p>
<p>在家托管会遇到一些挑战。一个突出的问题是（我经常听到的一个有效问题）没有静态 IP 地址。如今，由于需要 IP 地址的在线设备数量众多，我们要做的事情很多，而且大多数 IP 地址都是动态分配的，除非你从 ISP 付费购买。但还是有解决办法的。这就是动态 DNS 或 DDNS。每当 IP 地址发生变化时，DNS 服务器就会自动更新。设置动态 DNS 的方法多种多样。您可以托管自己的服务或使用主机。下面是一些主机和项目的链接，可供参考。</p>
<p>简而言之，它是这样工作的。你可以选择一个服务提供商，也可以自己设置。你可以获得一个域名，将客户端安装在家庭路由器或服务器上，客户端会定期检查 IP 地址是否发生变化，如果发生变化，它就会更新该域名的 DNS 记录。</p>
<h2 id="docker" class="headerLink">
    <a href="#docker" class="header-mark"></a><strong>Docker</strong></h2><p>在这里我不会介绍如何安装 docker。无论如何，最好还是按照官方的安装指南来安装。但我想谈几点。首先，docker 在测试新应用程序时非常有用。但我认为也仅此而已。我个人不太喜欢使用 docker，而是尽可能直接运行应用程序。以下是一些值得注意的利弊。</p>
<h3 id="优点" class="headerLink">
    <a href="#%e4%bc%98%e7%82%b9" class="header-mark"></a>优点</h3><p>如果你的系统可以运行 docker，你就可以运行大多数 docker 应用程序。它有助于隔离，减少应用程序之间的冲突。在某些情况下，它可以帮助提高效率，因为它比传统的虚拟机占用更少的资源。微服务架构也很有用，因为它可以将应用程序分解成更小的可管理服务，从而实现服务的独立扩展。最后，该社区规模庞大，文档完善，社区支持总是很有帮助，而且还有大量现成的 docker 映像可供部署。</p>
<h3 id="缺点" class="headerLink">
    <a href="#%e7%bc%ba%e7%82%b9" class="header-mark"></a>缺点</h3><p>首先是开销。虽然它比传统的虚拟机要好，但它比直接在主机上运行要耗费更多的资源，而且输入/输出操作可能会更慢。docker 共享系统内核的事实意味着，一个受损的应用程序可能会影响系统。持久化数据是可行的，但增加了一层复杂性，可能会导致新用户的数据丢失，也会使备份变得更加复杂。使用 docker 时，网络连接也会变得更加复杂，因此不会那么简单。值得注意的是，如果使用 UFW 或 firewalld 作为防火墙，docker 会绕过这些规则。Docker 只与 iptables 兼容。此外，管理良好的 docker 容器有助于管理服务器资源，但管理不当也会对资源造成损害。容器可能会变得过大，从而影响磁盘大小，而错误的配置则会占用过多的服务器资源。在监控和调试应用程序时，尤其是跨多个容器时，它还会增加额外的复杂性。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>好了，关于服务器设置和工具的基础知识就介绍到这里。有一个工具可以帮你完成大部分工作。我写它是为了让自己的服务器设置更快。你可以在这里获得它，它包含了我所有的必备工具，并做了一些基本配置。请根据自己的需要进行调整，并一如既往地注意安全。</p>
<h2 id="原文" class="headerLink">
    <a href="#%e5%8e%9f%e6%96%87" class="header-mark"></a>原文</h2><ul>
<li>[1] <a href="https://becomesovran.com/blog/server-setup-basics.html" target="_blank" rel="noopener noreferrer">Server Setup Basics</a></li>
</ul>
]]></description>
</item><item>
    <title>不容错过的 Bash 技巧</title>
    <link>https://www.techkoala.net/bash_tricks/</link>
    <pubDate>Fri, 04 Jun 2021 11:06:47 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/bash_tricks/</guid>
    <description><![CDATA[<blockquote>
<p>一些提升 Bash 使用效率的小技巧</p>
</blockquote>
<p>在使用 Bash 时，我们通常使用 上 ↑ 下 ↓ 箭头来快速切换历史命令，然而一些重复的、不想要的命令（例如最简单的 ls，敲击比切换快，同时也会增加切换到别的命令的按键次数）也在历史记录里保存，这降低了切换的效率。下面一些技巧可以更好的帮助我们切换到想要的命令：</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>说明<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>下文中需要编辑的内容均在<code>.bashrc</code>中，使用常用的文本编辑器打开它，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ vim ~/.bashrc
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="使用-histignore-移除历史记录中无意义的命令" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-histignore-%e7%a7%bb%e9%99%a4%e5%8e%86%e5%8f%b2%e8%ae%b0%e5%bd%95%e4%b8%ad%e6%97%a0%e6%84%8f%e4%b9%89%e7%9a%84%e5%91%bd%e4%bb%a4" class="header-mark"></a>使用 HISTIGNORE 移除历史记录中无意义的命令</h2><p>有一些命令极为常用常用、或者敲击简单，我们不想它出现在历史记录里，那么在<code>.bashrc</code>中添加下述内容忽略它即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HISTIGNORE</span><span class="o">=</span><span class="s1">&#39;pwd:exit:fg:bg:top:clear:history:ls:uptime:df&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>作为补充，如果我们不希望某些敏感的命令出现在历史记录中，例如在命令行中指定密码或 API 密钥，那么可以使用下面的选项来确保任何以<strong>空格</strong>开头的命令不会出现在历史文件中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HISTCONTROL</span><span class="o">=</span>ignorespace
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HISTCONTROL</span><span class="o">=</span>ignoredups
</span></span></code></pre></td></tr></table>
</div>
</div><p>则表示当同一个命令重复出现时，只存储命令的一个副本。</p>
<h2 id="设置历史记录数量" class="headerLink">
    <a href="#%e8%ae%be%e7%bd%ae%e5%8e%86%e5%8f%b2%e8%ae%b0%e5%bd%95%e6%95%b0%e9%87%8f" class="header-mark"></a>设置历史记录数量</h2><p>为了防止不必要的丢失，可以适当的将记录数量调整的更大：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">shopt</span> -s histappend
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HISTSIZE</span><span class="o">=</span><span class="m">10000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="更有效的调用命令" class="headerLink">
    <a href="#%e6%9b%b4%e6%9c%89%e6%95%88%e7%9a%84%e8%b0%83%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>更有效的调用命令</h2><p><code>!!</code>可以调用前一行的命令。</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">pwd</span>
</span></span><span class="line"><span class="cl">/etc
</span></span><span class="line"><span class="cl">$ !!
</span></span><span class="line"><span class="cl"><span class="nb">pwd</span>
</span></span><span class="line"><span class="cl">/etc
</span></span></code></pre></td></tr></table>
</div>
</div><p>同时，<code>!!</code>也可以作为参数加入别的命令配合使用，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo !!
</span></span></code></pre></td></tr></table>
</div>
</div><p>就将使用 root 权限再次执行此前的命令。</p>
<p>此外，我们还可以通过在历史命令提供的<strong>行号</strong>前加一个<code>!</code>来运行历史上的命令，但是请注意不要打错行号，避免执行出错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ rm -r temp/
</span></span><span class="line"><span class="cl">$ mkdir temp
</span></span><span class="line"><span class="cl">$ touch temp/test
</span></span><span class="line"><span class="cl">$ !!
</span></span><span class="line"><span class="cl">touch temp/test
</span></span><span class="line"><span class="cl">$ <span class="nb">history</span> <span class="p">|</span> tail -4
</span></span><span class="line"><span class="cl">  <span class="m">179</span>  rm -r temp/
</span></span><span class="line"><span class="cl">  <span class="m">180</span>  mkdir temp
</span></span><span class="line"><span class="cl">  <span class="m">181</span>  touch temp/test
</span></span><span class="line"><span class="cl">  <span class="m">182</span>  touch temp/test
</span></span><span class="line"><span class="cl">  <span class="m">183</span>  <span class="nb">history</span> <span class="p">|</span> tail -5
</span></span><span class="line"><span class="cl">$ !179:p
</span></span><span class="line"><span class="cl">rm -r temp
</span></span><span class="line"><span class="cl">$ !180
</span></span><span class="line"><span class="cl">touch temp/test
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们也可以用前面的<code>!</code>来调用一个命令的最后一次出现，例如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ !ping
</span></span></code></pre></td></tr></table>
</div>
</div><p>将运行我们最后运行的以 <code>ping</code> 开头的命令。</p>
<p>为了上述内容出错，可以添加一个<code>:p</code>来显示命令内容，而不实际执行它们。</p>
<h2 id="使用--和--调用前一行参数" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8--%e5%92%8c--%e8%b0%83%e7%94%a8%e5%89%8d%e4%b8%80%e8%a1%8c%e5%8f%82%e6%95%b0" class="header-mark"></a>使用 !$ 和 !* 调用前一行参数</h2><p>和<code>!!</code>不同，<code>!$</code>和<code>!*</code>仅指代前一行，命令的部分内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mv list.txt items.txt
</span></span><span class="line"><span class="cl">$ vim !$
</span></span><span class="line"><span class="cl">vim items.txt
</span></span><span class="line"><span class="cl">$ cp !$ shopping.txt
</span></span><span class="line"><span class="cl">cp items.txt shopping.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到<code>!$</code>指代上一行命令的最后一个参数。</p>
<p>而<code>!*</code>指代上一行命令<strong>除了第一个</strong>以外的所有参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ rm /var/log/httpd/access.log /var/log/httpd/error.log
</span></span><span class="line"><span class="cl">$ touch !*
</span></span><span class="line"><span class="cl">touch /var/log/httpd/access.log /var/log/httpd/error.log
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="用--替换前一行的匹配词" class="headerLink">
    <a href="#%e7%94%a8--%e6%9b%bf%e6%8d%a2%e5%89%8d%e4%b8%80%e8%a1%8c%e7%9a%84%e5%8c%b9%e9%85%8d%e8%af%8d" class="header-mark"></a>用 ^ 替换前一行的匹配词</h2><p><code>^</code>符号允许你在切换一个匹配的单词后重复前一个命令，比如说：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ rm /var/log/httpd/error.log
</span></span><span class="line"><span class="cl">$ ^error^access
</span></span><span class="line"><span class="cl">rm /var/log/httpd/access.log
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="https://cyb.org.uk/2021/05/03/bash-productivity.html" target="_blank" rel="noopener noreferrer">Be more productive with use of your BASH history</a></li>
</ul>]]></description>
</item><item>
    <title>Linux 系统信息查询</title>
    <link>https://www.techkoala.net/system_info/</link>
    <pubDate>Sun, 13 Sep 2020 22:35:06 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/system_info/</guid>
    <description><![CDATA[<blockquote>
<p>记录一些常用的 Linux 系统信息查询命令</p>
</blockquote>
<p>日常使用 Linux 过程中，偶尔会需要查询一下系统信息，特别是在对于使用云端主机时，了解必要的信息十分重要。本文总结了一些常用的信息以及相应的查询命令。</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>技巧<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">善用 grep 类命令作为配合，高效筛选想要的信息内容。</div>
        </div>
    </div>
<h2 id="系统信息" class="headerLink">
    <a href="#%e7%b3%bb%e7%bb%9f%e4%bf%a1%e6%81%af" class="header-mark"></a>系统信息</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ uname -a              <span class="c1"># 查看内核/操作系统/CPU 信息</span>
</span></span><span class="line"><span class="cl">$ head -n <span class="m">1</span> /etc/issue  <span class="c1"># 查看操作系统版本</span>
</span></span><span class="line"><span class="cl">$ hostname              <span class="c1"># 查看计算机名</span>
</span></span><span class="line"><span class="cl">$ lspci -tv             <span class="c1"># 列出所有 PCI 设备</span>
</span></span><span class="line"><span class="cl">$ lsusb -tv             <span class="c1"># 列出所有 USB 设备</span>
</span></span><span class="line"><span class="cl">$ lsmod                 <span class="c1"># 列出加载的内核模块</span>
</span></span><span class="line"><span class="cl">$ env                   <span class="c1"># 查看环境变量</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="系统资源" class="headerLink">
    <a href="#%e7%b3%bb%e7%bb%9f%e8%b5%84%e6%ba%90" class="header-mark"></a>系统资源</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /proc/cpuinfo             <span class="c1"># 查看 CPU 信息</span>
</span></span><span class="line"><span class="cl">$ lscpu                         <span class="c1"># 查看 CPU 信息</span>
</span></span><span class="line"><span class="cl">$ lshw -short                   <span class="c1"># 当前服务器 CPU、内存、磁盘等详细信息</span>
</span></span><span class="line"><span class="cl">$ free -m                       <span class="c1"># 查看内存使用量和交换区使用量</span>
</span></span><span class="line"><span class="cl">$ df -h                         <span class="c1"># 查看各分区使用情况</span>
</span></span><span class="line"><span class="cl">$ du -sh                        <span class="c1"># 查看指定目录的大小</span>
</span></span><span class="line"><span class="cl">$ grep MemTotal /proc/meminfo   <span class="c1"># 查看内存总量</span>
</span></span><span class="line"><span class="cl">$ grep MemFree /proc/meminfo    <span class="c1"># 查看空闲内存量</span>
</span></span><span class="line"><span class="cl">$ uptime                        <span class="c1"># 查看系统运行时间、用户数、负载</span>
</span></span><span class="line"><span class="cl">$ cat /proc/loadavg             <span class="c1"># 查看系统负载</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="磁盘和分区" class="headerLink">
    <a href="#%e7%a3%81%e7%9b%98%e5%92%8c%e5%88%86%e5%8c%ba" class="header-mark"></a>磁盘和分区</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mount <span class="p">|</span> column -t         <span class="c1"># 查看挂接的分区状态</span>
</span></span><span class="line"><span class="cl">$ fdisk -l                  <span class="c1"># 查看所有分区</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="网络信息" class="headerLink">
    <a href="#%e7%bd%91%e7%bb%9c%e4%bf%a1%e6%81%af" class="header-mark"></a>网络信息</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ip                    <span class="c1"># 查看网络相关信息，具体用法参见 man 手册</span>
</span></span><span class="line"><span class="cl">$ iptables -L           <span class="c1"># 查看防火墙设置</span>
</span></span><span class="line"><span class="cl">$ route -n              <span class="c1"># 查看路由表</span>
</span></span><span class="line"><span class="cl">$ netstat -lntp         <span class="c1"># 查看所有监听端口</span>
</span></span><span class="line"><span class="cl">$ netstat -antp         <span class="c1"># 查看所有已经建立的连接</span>
</span></span><span class="line"><span class="cl">$ netstat -s            <span class="c1"># 查看网络统计信息</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="进程查询" class="headerLink">
    <a href="#%e8%bf%9b%e7%a8%8b%e6%9f%a5%e8%af%a2" class="header-mark"></a>进程查询</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps -ef            <span class="c1"># 查看所有进程</span>
</span></span><span class="line"><span class="cl">$ top               <span class="c1"># 实时显示进程状态</span>
</span></span><span class="line"><span class="cl">$ htop              <span class="c1"># 实时显示进程状态，加强版 top</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="用户信息" class="headerLink">
    <a href="#%e7%94%a8%e6%88%b7%e4%bf%a1%e6%81%af" class="header-mark"></a>用户信息</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ w                             <span class="c1"># 查看活动用户</span>
</span></span><span class="line"><span class="cl">$ id &lt;用户名&gt;                    <span class="c1"># 查看指定用户信息</span>
</span></span><span class="line"><span class="cl">$ last                          <span class="c1"># 查看用户登录日志</span>
</span></span><span class="line"><span class="cl">$ cut -d: -f1 /etc/passwd       <span class="c1"># 查看系统所有用户</span>
</span></span><span class="line"><span class="cl">$ cut -d: -f1 /etc/group        <span class="c1"># 查看系统所有组</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="服务" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1" class="header-mark"></a>服务</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ crontab -l                    <span class="c1"># 查看当前用户的计划任务</span>
</span></span><span class="line"><span class="cl">$ chkconfig –list               <span class="c1"># 列出所有系统服务</span>
</span></span><span class="line"><span class="cl">$ chkconfig –list <span class="p">|</span> grep on     <span class="c1"># 列出所有启动的系统服务</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="软件信息" class="headerLink">
    <a href="#%e8%bd%af%e4%bb%b6%e4%bf%a1%e6%81%af" class="header-mark"></a>软件信息</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ apt list --installed          <span class="c1"># 显示 apt 安装的软件</span>
</span></span><span class="line"><span class="cl">$ pacman -Qmeq                  <span class="c1"># 显示 aur 软件</span>
</span></span><span class="line"><span class="cl">$ pacman -Qneq                  <span class="c1"># 显示 pacman 安装的软件</span>
</span></span><span class="line"><span class="cl">$ pactree package_name          <span class="c1"># 显示软件的依赖树</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Linux 安全分析与加固</title>
    <link>https://www.techkoala.net/linux_security/</link>
    <pubDate>Sun, 07 Jun 2020 23:22:43 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/linux_security/</guid>
    <description><![CDATA[<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png" data-sub-html="<h2>Linux</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/linux.png">
    </a><figcaption class="image-caption">Linux</figcaption>
    </figure>
<blockquote>
<p>记录一些常见的 Linux 服务器安全问题分析以及防护措施</p>
</blockquote>
<h2 id="日志分析" class="headerLink">
    <a href="#%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%90" class="header-mark"></a>日志分析</h2><h3 id="常用日志文件" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e6%97%a5%e5%bf%97%e6%96%87%e4%bb%b6" class="header-mark"></a>常用日志文件</h3><p><code>Debian</code> 以及 <code>RHEL</code> 系的系统日志是由一个名为 <code>syslog</code> 的服务管理的，如以下日志文件都是由 <code>syslog</code> 日志服务驱动的：</p>
<p><code>/var/log/boot.log</code>：记录了系统在引导过程中发生的事件，就是 <code>Linux</code> 系统开机自检过程显示的信息</p>
<p><code>/var/log/lastlog</code> ：记录最后一次用户成功登陆的时间、登陆 <code>IP</code> 等信息</p>
<p><code>/var/log/messages</code> ：记录 <code>Linux</code> 操作系统常见的系统和服务错误信息</p>
<p><code>/var/log/secure</code> ：<code>Linux</code> 系统安全日志，记录用户和工作组变坏情况、用户登陆认证情况</p>
<p><code>/var/log/syslog</code>：只记录警告信息，常常是系统出问题的信息，使用 <code>lastlog</code> 查看</p>
<p><code>/var/log/wtmp</code>：该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件，使用 last 命令查看</p>
<p><code>/var/run/utmp</code>：该日志文件记录有关当前登录的每个用户的信息。如 <code>who</code>、<code>w</code>、<code>users</code>、<code>finger</code> 等就需要访问这个文件</p>
<p><strong><code>/var/log/btmp</code>：记录 <code>Linux</code> 登陆失败的用户、时间以及远程 <code>IP</code> 地址</strong></p>
<p><strong><code>/var/log/auth.log</code> 或 <code>/var/log/secure</code> 存储来自可插拔认证模块 (PAM) 的日志，包括成功的登录，失败的登录尝试和认证方式。</strong></p>
<blockquote>
<p>注：<code>Debian</code> 系在 /var/log/auth.log 中存储认证信息而 <code>RHEL</code> 系则在 /var/log/secure 中存储。</p>
</blockquote>
<p><strong>Archlinux</strong> 使用 <code>systemd</code> 提供的日志系统（logging system），称为 <code>journal</code>。使用 <code>systemd</code> 日志，无需额外安装日志服务（<code>syslog</code>）。</p>
<h3 id="相关日志查看命令" class="headerLink">
    <a href="#%e7%9b%b8%e5%85%b3%e6%97%a5%e5%bf%97%e6%9f%a5%e7%9c%8b%e5%91%bd%e4%bb%a4" class="header-mark"></a>相关日志查看命令</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /var/log/secure <span class="p">|</span> awk <span class="s1">&#39;/Failed/{print $(NF-3)}&#39;</span> <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> awk <span class="s1">&#39;{print $2&#34;=&#34;$1;}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看尝试暴力登录 <code>root</code> 的 <code>IP</code> 及次数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ grep <span class="s2">&#34;Failed password for root&#34;</span> /var/log/auth.log <span class="p">|</span> awk <span class="s1">&#39;{print $11}&#39;</span> <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> sort -nr <span class="p">|</span> more
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="常见防护措施" class="headerLink">
    <a href="#%e5%b8%b8%e8%a7%81%e9%98%b2%e6%8a%a4%e6%8e%aa%e6%96%bd" class="header-mark"></a>常见防护措施</h2><h3 id="ssh" class="headerLink">
    <a href="#ssh" class="header-mark"></a>SSH</h3><h4 id="编辑-ssh-配置文件" class="headerLink">
    <a href="#%e7%bc%96%e8%be%91-ssh-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>编辑 SSH 配置文件</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ vim /etc/ssh/sshd_config
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>1、修改端口</strong></p>
<p><code>#Port 22 —&gt; Port xxxx</code></p>
<p><strong>2、关闭 root 登录</strong></p>
<p><code>PermitRootLogin yes -&gt; PermitRootLogin no</code></p>
<p><strong>3、使用证书登录</strong></p>
<ul>
<li>
<p><strong>若不存在证书首先执行下面步骤</strong></p>
<p>在客户端生成密钥:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ssh-keygen -t rsa
</span></span></code></pre></td></tr></table>
</div>
</div><p>把公钥拷贝至服务器:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ssh-copy-id -i .ssh/id_rsa.pub server
</span></span></code></pre></td></tr></table>
</div>
</div><p>或手动将 id_rsa.pub 拷贝至服务器用户目录的.ssh 中，并修改访问权限：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ scp .shh/id_rsa.pub server:~/.ssh
</span></span></code></pre></td></tr></table>
</div>
</div><p>服务器中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ chmod <span class="m">400</span> authorized_keys
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>打开证书登录：</p>
<p><code>RSAAuthentication yes</code></p>
<p>开启公钥验证：</p>
<p><code>PubkeyAuthentication yes</code></p>
<p>验证文件路径：</p>
<p><code>AuthorizedKeysFile .ssh/authorized_keys</code></p>
<p>禁止密码认证：</p>
<p><code>PasswordAuthentication no</code></p>
<p>禁止空密码：</p>
<p><code>PermitEmptyPasswords no</code></p>
<p><strong>最后，重启 SSHD 服务</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ systemctl restart sshd
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="用户以及用户组管理" class="headerLink">
    <a href="#%e7%94%a8%e6%88%b7%e4%bb%a5%e5%8f%8a%e7%94%a8%e6%88%b7%e7%bb%84%e7%ae%a1%e7%90%86" class="header-mark"></a>用户以及用户组管理</h3><h4 id="无用用户用户组" class="headerLink">
    <a href="#%e6%97%a0%e7%94%a8%e7%94%a8%e6%88%b7%e7%94%a8%e6%88%b7%e7%bb%84" class="header-mark"></a>无用用户、用户组</h4><p><strong>Linux 系统中可以删除的默认用户和组大致有如下这些：</strong></p>
<p>可删除的用户，如 <code>adm,lp,sync,shutdown,halt,news,uucp,operator,games,gopher</code> 等。</p>
<p>可删除的组，如 <code>adm,lp,news,uucp,games,dip,pppusers,popusers,slipusers</code> 等。</p>
<h4 id="空口令账户" class="headerLink">
    <a href="#%e7%a9%ba%e5%8f%a3%e4%bb%a4%e8%b4%a6%e6%88%b7" class="header-mark"></a>空口令账户</h4><p>使用如下命令检测空口令账户：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ awk -F: <span class="s1">&#39;$2==&#34;!!&#34; {print $1}&#39;</span> /etc/shadow
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后查看 <code>/etc/passwd</code> 确认空口令用户是否可以登录，选择是否加固密码。</p>
<h4 id="登录失败后强制延时" class="headerLink">
    <a href="#%e7%99%bb%e5%bd%95%e5%a4%b1%e8%b4%a5%e5%90%8e%e5%bc%ba%e5%88%b6%e5%bb%b6%e6%97%b6" class="header-mark"></a>登录失败后强制延时</h4><p>在 <code>/etc/pam.d/system-login</code> 中添加 <code>auth optional pam_faildelay.so delay=4000000</code>，表示延时 4 秒（单位微秒）</p>
<h4 id="限制-root-权限" class="headerLink">
    <a href="#%e9%99%90%e5%88%b6-root-%e6%9d%83%e9%99%90" class="header-mark"></a>限制 root 权限</h4><p>可以为单个用户启用单个程序的 <code>root</code> 权限，而不用为了运行一个程序启用该用户对 <code>root</code> 的完整访问权。例如，要授予用户 <code>alice</code> 对特定程序的访问权限：</p>
<p>编辑 <code>/etc/sudoers</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ visudo
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>若要指定 visudo 的默认编辑器，最好是修改 <code>/etc/sudoers</code> 中的 <code>Defaults editor=xxxx</code></p>
<p>而不是使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nv">EDITOR</span><span class="o">=</span>nano visudo
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为任何程序都可以通过该命令指定作为编辑器，存在风险。</p>
</li>
</ul>
<p>添加：</p>
<p><code>alice ALL = NOPASSWD: /path/to/program</code></p>
<h3 id="关闭不必要的服务" class="headerLink">
    <a href="#%e5%85%b3%e9%97%ad%e4%b8%8d%e5%bf%85%e8%a6%81%e7%9a%84%e6%9c%8d%e5%8a%a1" class="header-mark"></a>关闭不必要的服务</h3><p><strong>例如</strong> 某台 <code>Linux</code> 服务器用于 <code>www</code> 应用，那么除了 <code>httpd</code> 服务和系统运行是必须的服务外，其他服务都可以关闭。下面这些服务一般情况下是不需要的，可以选择关闭：</p>
<p><code>anacron、auditd、autofs、avahi-daemon、avahi-dnsconfd、bluetooth、cpuspeed、firstboot、gpm、haldaemon、hidd、ip6tables、ipsec、isdn、lpd、mcstrans、messagebus、netfs、nfs、nfslock、nscd、pcscd portmap、readahead_early、restorecond、rpcgssd、rpcidmapd、rstatd、sendmail、setroubleshoot、yppasswdd ypserv</code></p>
<h3 id="文件系统安全" class="headerLink">
    <a href="#%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e5%ae%89%e5%85%a8" class="header-mark"></a>文件系统安全</h3><p><strong>文件权限检查和修改</strong></p>
<p><strong>（1）查找系统中任何用户都有写权限的文件或目录</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ find / -type f -perm -2 -o -perm -20 <span class="p">|</span>xargs ls -al //查找文件
</span></span><span class="line"><span class="cl">$ find / -type d -perm -2 -o -perm -20 <span class="p">|</span>xargs ls –ld //查找目录
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>（2）查找系统中所有含 “s” 位的程序</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ find / -type f -perm -4000 -o -perm -2000 -print <span class="p">|</span> xargs ls –al
</span></span></code></pre></td></tr></table>
</div>
</div><p>含有 “s” 位权限的程序对系统安全威胁很大，通过查找系统中所有具有 “s” 位权限的程序，可以把某些不必要的 “s” 位程序去掉，这样可以防止用户滥用权限或提升权限的可能性。</p>
<p><strong>（3）检查系统中所有 suid 及 sgid 文件</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ find / -user root -perm -2000 -print -exec md5sum <span class="o">{}</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">$ find / -user root -perm -4000 -print -exec md5sum <span class="o">{}</span> <span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将检查的结果保存到文件中，可在以后的系统检查中作为参考。</p>
<p><strong>（4）检查系统中没有属主的文件</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ find / -nouser -o –nogroup
</span></span></code></pre></td></tr></table>
</div>
</div><p>没有属主的孤儿文件比较危险，因此找到这些文件后，要么删除掉，要么修改文件的属主，使其处于安全状态。</p>
<h2 id="常用防护软件" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e9%98%b2%e6%8a%a4%e8%bd%af%e4%bb%b6" class="header-mark"></a>常用防护软件</h2><h3 id="fail2ban" class="headerLink">
    <a href="#fail2ban" class="header-mark"></a>fail2ban</h3><p>fail2ban 通过扫描日志文件，筛选登录失败后继续频繁尝试登录的同一来源的非善意行为，根据用户定义的规则对访问来源做响应的封禁处理。</p>
<p><strong>1、安装</strong></p>
<p>以 debian 为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo apt update
</span></span><span class="line"><span class="cl">$ sudo apt install fail2ban
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>2、复制配置文件</strong></p>
<p>fail2ban 安装在  <code>/etc/fail2ban</code> 路径下,监控目标在 /etc/fail2ban/jail.conf 文件中，官方建议自定义的监控目标放在 /etc/fail2ban/jail.local 或者在 /etc/fail2ban/jail.d 目录中新建配置文件。因此，这里首先复制一份本地配置文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>3、修改配置文件</strong></p>
<p>配置文件中的一些全局关键字段说明：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ignoreip = 127.0.0.1    # &#34;ignoreip&#34; 是指不会被禁止访问的主机地址，它可以是单 IP 地址、CIDR （汇聚网段）地址，甚至可以是 DNS （主机域名），若有多个条目，各条目间用空格分隔。
</span></span><span class="line"><span class="cl">bantime  = 3600         # &#34;bantime&#34; 字段设置禁止访问的时间间隔，以秒为单位。
</span></span><span class="line"><span class="cl">findtime  = 600         # &#34;findtime&#34; 是指在指定时间间隔内，达到或超过  &#34;Maxretry&#34;  次失败连接尝试，即被命中，禁止访问，以秒为单位。
</span></span><span class="line"><span class="cl">Maxretry = 3            # &#34;Maxretry&#34; 是指最大尝试次数。
</span></span></code></pre></td></tr></table>
</div>
</div><p>此外，fail2ban 使用 jail 的概念对每个需要保护的服务进行配置，其中配置文件中已经对常见的服务进行了预设，当然，你也可以自定义不同服务的详细信息。jail 的模板如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[xxx]                                #jail的名字
</span></span><span class="line"><span class="cl">enabled  = true                      #是否启用
</span></span><span class="line"><span class="cl">port     = xxxx                      #需要进行保护的端口
</span></span><span class="line"><span class="cl">filter   = xxxx                      #指定 SSH 监控使用的规则过滤配置文件，大量默认规则保存在 /etc/fail2ban/filter.d，使用默认规则直接输入名称即可。
</span></span><span class="line"><span class="cl">action   = xxxx                      #发现恶意IP后采取的操作。action.d 目录中预定义了许多常用操作，例如调用 iptables/firewalld 封禁、sendmail 发送通知邮件；
</span></span><span class="line"><span class="cl">logpath  = xxxxxxxx                  #指定 fail2ban 监控日志文件路径，可换行输入多个路径
</span></span><span class="line"><span class="cl">bantime = xxxx
</span></span><span class="line"><span class="cl">findtime = xxxx
</span></span><span class="line"><span class="cl">maxretry = xxxx
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="以保护-ssh-为例" class="headerLink">
    <a href="#%e4%bb%a5%e4%bf%9d%e6%8a%a4-ssh-%e4%b8%ba%e4%be%8b" class="header-mark"></a>以保护 SSH 为例</h4><p>编辑配置文件<code>jail.local</code>，开启 ssh 保护，其中可定义多个字段：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="p">[</span><span class="n">ssh</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">enabled</span>  <span class="o">=</span> <span class="bp">true</span>
</span></span><span class="line"><span class="cl"><span class="n">port</span>     <span class="o">=</span> <span class="n">ssh</span>
</span></span><span class="line"><span class="cl"><span class="n">filter</span>   <span class="o">=</span> <span class="n">sshd</span>
</span></span><span class="line"><span class="cl"><span class="n">action</span>   <span class="o">=</span> <span class="n">iptables</span><span class="p">[</span><span class="n">name</span><span class="o">=</span><span class="n">SSH</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">ssh</span><span class="p">,</span> <span class="n">protocol</span><span class="o">=</span><span class="n">tcp</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">logpath</span>  <span class="o">=</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="nb">log</span><span class="o">/</span><span class="n">auth</span><span class="o">.</span><span class="n">log</span>
</span></span><span class="line"><span class="cl"><span class="n">maxretry</span> <span class="o">=</span> <span class="mi">6</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其余未设置的项尊崇全局设置。</p>
<p><strong>4、启动并查看状态</strong></p>
<p>配置好后保存配置文件，设置开启启动并启动 fail2ban：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ systemctl <span class="nb">enable</span> fail2ban
</span></span><span class="line"><span class="cl">$ systemctl start fail2ban
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看 fail2ban 的运行状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ fail2ban-client status
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Status
</span></span><span class="line"><span class="cl">|- Number of jail:      1
</span></span><span class="line"><span class="cl">`- Jail list:   sshd
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要查看详情，则只需使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ fail2ban-client status sshd
</span></span></code></pre></td></tr></table>
</div>
</div><p>即可输出对应 jail 的详细信息，如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Status</span> <span class="k">for</span> <span class="n">the</span> <span class="n">jail</span><span class="p">:</span> <span class="n">sshd</span>
</span></span><span class="line"><span class="cl"><span class="o">|-</span> <span class="n">Filter</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span>  <span class="o">|-</span> <span class="n">Currently</span> <span class="n">failed</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span>  <span class="o">|-</span> <span class="n">Total</span> <span class="n">failed</span><span class="p">:</span>     <span class="mi">2479</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span>  <span class="err">`</span><span class="o">-</span> <span class="ne">File</span> <span class="n">list</span><span class="p">:</span>        <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="nb">log</span><span class="o">/</span><span class="n">auth</span><span class="o">.</span><span class="n">log</span>
</span></span><span class="line"><span class="cl"><span class="err">`</span><span class="o">-</span> <span class="n">Actions</span>
</span></span><span class="line"><span class="cl">   <span class="o">|-</span> <span class="n">Currently</span> <span class="n">banned</span><span class="p">:</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">   <span class="o">|-</span> <span class="n">Total</span> <span class="n">banned</span><span class="p">:</span>     <span class="mi">118</span>
</span></span><span class="line"><span class="cl">   <span class="err">`</span><span class="o">-</span> <span class="n">Banned</span> <span class="ne">IP</span> <span class="n">list</span><span class="p">:</span>   <span class="mf">31.184</span><span class="o">.</span><span class="mf">198.75</span> <span class="mf">173.212</span><span class="o">.</span><span class="mf">240.196</span> <span class="mf">116.110</span><span class="o">.</span><span class="mf">108.227</span> <span class="mf">171.227</span><span class="o">.</span><span class="mf">208.32</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] Linux 服务器为什么被黑？</p>
</li>
<li>
<p>[2] <a href="https://www.cnblogs.com/doublexi/p/9636506.html" target="_blank" rel="noopener noreferrer">linux 系统安全加固 &ndash; 账号相关</a></p>
</li>
<li>
<p>[3] <a href="https://wiki.archlinux.org/index.php/Security" target="_blank" rel="noopener noreferrer">Security - Archlinux Wiki</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>查看 Linux 进程信息</title>
    <link>https://www.techkoala.net/process/</link>
    <pubDate>Mon, 02 Mar 2020 17:03:48 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/process/</guid>
    <description><![CDATA[<blockquote>
<p>Linux 中如何查看进程信息？</p>
</blockquote>
<p>Linux 中常使用 ps 命令显示当前运行中进程的相关信息的一份快照，包括 PID 等等。而 top 命令可以实时刷新进程信息，包括 CPU 占用，内存占用等等。</p>
<h2 id="ps-命令" class="headerLink">
    <a href="#ps-%e5%91%bd%e4%bb%a4" class="header-mark"></a>ps 命令</h2><p>Linux 上进程有 5 种状态：</p>
<ol>
<li>
<p>运行(正在运行或在运行队列中等待)</p>
</li>
<li>
<p>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</p>
</li>
<li>
<p>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</p>
</li>
<li>
<p>僵死(进程已终止, 但进程描述符存在, 直到父进程调用 wait4()系统调用后释放)</p>
</li>
<li>
<p>停止(进程收到 SIGSTOP, SIGSTP, SIGTIN, SIGTOU 信号后停止运行运行)</p>
</li>
</ol>
<p>ps 工具标识进程的 5 种状态码：</p>
<ul>
<li>
<p>D 不可中断 uninterruptible sleep (usually IO)</p>
</li>
<li>
<p>R 运行 runnable (on run queue)</p>
</li>
<li>
<p>S 中断 sleeping</p>
</li>
<li>
<p>T 停止 traced or stopped</p>
</li>
<li>
<p>Z 僵死 a defunct (“zombie”) process</p>
</li>
</ul>
<h3 id="语法" class="headerLink">
    <a href="#%e8%af%ad%e6%b3%95" class="header-mark"></a>语法</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps <span class="o">[</span>选项<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="选项" class="headerLink">
    <a href="#%e9%80%89%e9%a1%b9" class="header-mark"></a>选项</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-a：          显示所有终端机下执行的程序，除了阶段作业领导者之外。
</span></span><span class="line"><span class="cl">a：           显示现行终端机下的所有程序，包括其他用户的程序。
</span></span><span class="line"><span class="cl">-A：          显示所有程序。
</span></span><span class="line"><span class="cl">-c：          显示CLS和PRI栏位。
</span></span><span class="line"><span class="cl">c：           列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。
</span></span><span class="line"><span class="cl">-C&lt;指令名称&gt;： 指定执行指令的名称，并列出该指令的程序的状况。
</span></span><span class="line"><span class="cl">-d：          显示所有程序，但不包括阶段作业领导者的程序。
</span></span><span class="line"><span class="cl">-e：          此选项的效果和指定&#34;A&#34;选项相同。
</span></span><span class="line"><span class="cl">e：           列出程序时，显示每个程序所使用的环境变量。
</span></span><span class="line"><span class="cl">-f：          显示UID,PPIP,C与STIME栏位。
</span></span><span class="line"><span class="cl">f：           用ASCII字符显示树状结构，表达程序间的相互关系。
</span></span><span class="line"><span class="cl">g：           显示现行终端机下的所有程序，包括群组领导者的程序。
</span></span><span class="line"><span class="cl">-G&lt;群组识别码&gt;：列出属于该群组的程序的状况，也可使用群组名称来指定。
</span></span><span class="line"><span class="cl">h：           不显示标题列。
</span></span><span class="line"><span class="cl">-H：          显示树状结构，表示程序间的相互关系。
</span></span><span class="line"><span class="cl">-j或j：       采用工作控制的格式显示程序状况。
</span></span><span class="line"><span class="cl">-l或l：       采用详细的格式来显示程序状况。
</span></span><span class="line"><span class="cl">L：           列出栏位的相关信息。
</span></span><span class="line"><span class="cl">-m或m：       显示所有的执行绪。
</span></span><span class="line"><span class="cl">n：           以数字来表示USER和WCHAN栏位。
</span></span><span class="line"><span class="cl">-N：          显示所有的程序，除了执行ps指令终端机下的程序之外。
</span></span><span class="line"><span class="cl">-p&lt;程序识别码&gt;：指定程序识别码，并列出该程序的状况。
</span></span><span class="line"><span class="cl">r：           只列出现行终端机正在执行中的程序。
</span></span><span class="line"><span class="cl">-s&lt;阶段作业&gt;：  指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。
</span></span><span class="line"><span class="cl">s：           采用程序信号的格式显示程序状况。
</span></span><span class="line"><span class="cl">S：           列出程序时，包括已中断的子程序资料。
</span></span><span class="line"><span class="cl">-t&lt;终端机编号&gt;：指定终端机编号，并列出属于该终端机的程序的状况。
</span></span><span class="line"><span class="cl">-T：          显示现行终端机下的所有程序。
</span></span><span class="line"><span class="cl">u：           以用户为主的格式来显示程序状况。
</span></span><span class="line"><span class="cl">-U&lt;用户识别码&gt;：列出属于该用户的程序的状况，也可使用用户名称来指定。
</span></span><span class="line"><span class="cl">U&lt;用户名称&gt;：   列出属于该用户的程序的状况。
</span></span><span class="line"><span class="cl">v：           采用虚拟内存的格式显示程序状况。
</span></span><span class="line"><span class="cl">-V或V：       显示版本信息。
</span></span><span class="line"><span class="cl">-w或w：       采用宽阔的格式来显示程序状况。　
</span></span><span class="line"><span class="cl">x：           显示所有程序，不以终端机来区分。
</span></span><span class="line"><span class="cl">-y：          配合选项&#34;-l&#34;使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位。
</span></span><span class="line"><span class="cl">--headers：   重复显示标题列。
</span></span><span class="line"><span class="cl">--help：      在线帮助。
</span></span><span class="line"><span class="cl">--info：      显示排错信息。
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实例" class="headerLink">
    <a href="#%e5%ae%9e%e4%be%8b" class="header-mark"></a>实例</h3><p>显示所有运行中的进程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps aux <span class="p">|</span> less
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看系统中的每个进程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps -A
</span></span><span class="line"><span class="cl">或
</span></span><span class="line"><span class="cl">$ ps -e
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看非 root 运行的进程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps -U root -u root -N
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看用户 xxx 运行的进程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps -u xxx
</span></span></code></pre></td></tr></table>
</div>
</div><p>获得线程信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps -eLf
</span></span><span class="line"><span class="cl">$ ps axms
</span></span></code></pre></td></tr></table>
</div>
</div><p>获得安全信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps -eo euser,ruser,suser,fuser,f,comm,label
</span></span><span class="line"><span class="cl">$ ps axZ
</span></span><span class="line"><span class="cl">$ ps -eM
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示进程的树状图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps -ejH
</span></span><span class="line"><span class="cl">$ ps axjf
</span></span></code></pre></td></tr></table>
</div>
</div><p>此外 pstree 也可以以树状显示正在运行的进程。树的根节点为 pid 或 init。如果指定了用户名，进程树将以用户所拥有的进程作为根节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ pstree
</span></span></code></pre></td></tr></table>
</div>
</div><p>查找进程：</p>
<p>ps 可以打搭配 grep 进行指定关键词进程的查找：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ps aux <span class="p">|</span> grep zsh
</span></span></code></pre></td></tr></table>
</div>
</div><p>此外使用 pgrep 也能查找当前正在运行的进程并列出符合条件的进程 ID。</p>
<p>例如显示 firefox 的进程 ID：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ pgrep firefox
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示进程名为 sshd、所有者为 root 的进程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ pgrep -u root sshd
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="top-命令" class="headerLink">
    <a href="#top-%e5%91%bd%e4%bb%a4" class="header-mark"></a>top 命令</h2><p>top 命令提供了运行中系统的动态实时视图。</p>
<h3 id="语法-1" class="headerLink">
    <a href="#%e8%af%ad%e6%b3%95-1" class="header-mark"></a>语法</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ top <span class="o">[</span>参数<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="参数" class="headerLink">
    <a href="#%e5%8f%82%e6%95%b0" class="header-mark"></a>参数</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-b        批处理
</span></span><span class="line"><span class="cl">-c        显示完整的治命令
</span></span><span class="line"><span class="cl">-I        忽略失效过程
</span></span><span class="line"><span class="cl">-s        保密模式
</span></span><span class="line"><span class="cl">-S        累积模式
</span></span><span class="line"><span class="cl">-i&lt;时间&gt;   设置间隔时间
</span></span><span class="line"><span class="cl">-u&lt;用户名&gt; 指定用户名
</span></span><span class="line"><span class="cl">-p&lt;进程号&gt; 指定进程
</span></span><span class="line"><span class="cl">-n&lt;次数&gt;   循环显示的次数
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp" data-sub-html="<h2>top 命令</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/top.webp">
    </a><figcaption class="image-caption">top 命令</figcaption>
    </figure>
<p>按 q 退出，按 h 进入帮助。</p>
<h3 id="实例-1" class="headerLink">
    <a href="#%e5%ae%9e%e4%be%8b-1" class="header-mark"></a>实例</h3><p>将进程快照储存到文件中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ top -b -n1 &gt; /tmp/process.log
</span></span></code></pre></td></tr></table>
</div>
</div><p>将结果通过邮件发送：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ top -b -n1 <span class="p">|</span> mail -s <span class="s1">&#39;Process snapshot&#39;</span> you@example.com
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="htop" class="headerLink">
    <a href="#htop" class="header-mark"></a>Htop</h2><p>Htop 是一个类似 top 的交互式进程查看工具，可以垂直和水平滚动来查看所有进程和他们的命令行。进程的相关操作(killing，renicing)不需要输入 PID。Htop 一般需要自行安装。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ htop
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp" data-sub-html="<h2>Htop 命令</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/htop.webp">
    </a><figcaption class="image-caption">Htop 命令</figcaption>
    </figure>
<h2 id="atop" class="headerLink">
    <a href="#atop" class="header-mark"></a>atop</h2><p>atop 是一个用来查看 Linux 系统负载的交互式监控工具。它能展现系统层级的关键硬件资源(从性能角度)的使用情况，如 CPU、内存、硬盘和网络。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ atop
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp" data-sub-html="<h2>atop 命令</h2>">
        <img
            
            loading="lazy"
            src="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp"
            srcset="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp 1.5x, https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp 2x"
            sizes="auto"
            alt="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Linux/Process/atop.webp">
    </a><figcaption class="image-caption">atop 命令</figcaption>
    </figure>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://os.51cto.com/art/201101/244090.htm" target="_blank" rel="noopener noreferrer">如何在 Linux 中查看所有正在运行的进程</a></p>
</li>
<li>
<p>[2] <a href="https://www.cnblogs.com/peida/archive/2012/12/19/2824418.html" target="_blank" rel="noopener noreferrer">每天一个linux命令（41）：ps命令</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>使用 df 和 du 查看存储信息</title>
    <link>https://www.techkoala.net/command_df_du/</link>
    <pubDate>Thu, 10 Oct 2019 13:36:09 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.net/command_df_du/</guid>
    <description><![CDATA[<blockquote>
<p>Linux 中使用 df 和 du 查看磁盘以及文件存储信息的</p>
</blockquote>
<h2 id="df" class="headerLink">
    <a href="#df" class="header-mark"></a>df</h2><p>df 命令用于显示磁盘分区上的可使用的磁盘空间。主要用于查看一级文件夹大小、使用比例、档案系统及其挂入点，但<strong>无法</strong>查看单个文件大小。</p>
<p>默认显示单位为 KB。</p>
<h3 id="语法" class="headerLink">
    <a href="#%e8%af%ad%e6%b3%95" class="header-mark"></a>语法</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">df <span class="o">[</span>选项<span class="o">]</span> <span class="o">[</span>参数<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="选项" class="headerLink">
    <a href="#%e9%80%89%e9%a1%b9" class="header-mark"></a>选项</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-a或--all                                    包含全部的文件系统；
</span></span><span class="line"><span class="cl">--block-size<span class="o">=</span>&lt;区块大小&gt;                       以指定的区块大小来显示区块数目；
</span></span><span class="line"><span class="cl">-h或--human-readable                         以可读性较高的方式来显示信息；
</span></span><span class="line"><span class="cl">-H或--si                                     与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes；
</span></span><span class="line"><span class="cl">-i或--inodes                                 显示inode的信息；
</span></span><span class="line"><span class="cl">-k或--kilobytes                              指定区块大小为1024字节；
</span></span><span class="line"><span class="cl">-l或--local                                  仅显示本地端的文件系统；
</span></span><span class="line"><span class="cl">-m或--megabytes                              指定区块大小为1048576字节；
</span></span><span class="line"><span class="cl">--no-sync                                    在取得磁盘使用信息前，不要执行sync指令，此为预设值；
</span></span><span class="line"><span class="cl">-P或--portability                            使用POSIX的输出格式；
</span></span><span class="line"><span class="cl">--sync                                       在取得磁盘使用信息前，先执行sync指令；
</span></span><span class="line"><span class="cl">-t&lt;文件系统类型&gt;或--type<span class="o">=</span>&lt;文件系统类型&gt;          仅显示指定文件系统类型的磁盘信息；
</span></span><span class="line"><span class="cl">-T或--print-type                             显示文件系统的类型；
</span></span><span class="line"><span class="cl">-x&lt;文件系统类型&gt;或--exclude-type<span class="o">=</span>&lt;文件系统类型&gt;  不要显示指定文件系统类型的磁盘信息；
</span></span><span class="line"><span class="cl">--help                                       显示帮助；
</span></span><span class="line"><span class="cl">--version                                    显示版本信息。
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="du" class="headerLink">
    <a href="#du" class="header-mark"></a>du</h2><p>du 命令是查看文件和目录磁盘使用的空间。</p>
<h3 id="语法-1" class="headerLink">
    <a href="#%e8%af%ad%e6%b3%95-1" class="header-mark"></a>语法</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">du <span class="o">[</span>选项<span class="o">]</span> <span class="o">[</span>文件<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="选项-1" class="headerLink">
    <a href="#%e9%80%89%e9%a1%b9-1" class="header-mark"></a>选项</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-a或-all                                显示目录中个别文件的大小。
</span></span><span class="line"><span class="cl">-b或-bytes                              显示目录或文件大小时，以byte为单位。
</span></span><span class="line"><span class="cl">-c或--total                             除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。
</span></span><span class="line"><span class="cl">-k或--kilobytes                         以KB<span class="o">(</span>1024bytes<span class="o">)</span>为单位输出。
</span></span><span class="line"><span class="cl">-m或--megabytes                         以MB为单位输出。
</span></span><span class="line"><span class="cl">-s或--summarize                         仅显示总计，只列出最后加总的值。
</span></span><span class="line"><span class="cl">-h或--human-readable                    以K，M，G为单位，提高信息的可读性。
</span></span><span class="line"><span class="cl">-x或--one-file-xystem                   以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。
</span></span><span class="line"><span class="cl">-L&lt;符号链接&gt;或--dereference&lt;符号链接&gt;      显示选项中所指定符号链接的源文件大小。
</span></span><span class="line"><span class="cl">-S或--separate-dirs                     显示个别目录的大小时，并不含其子目录的大小。
</span></span><span class="line"><span class="cl">-X&lt;文件&gt;或--exclude-from<span class="o">=</span>&lt;文件&gt;          在&lt;文件&gt;指定目录或文件。
</span></span><span class="line"><span class="cl">--exclude<span class="o">=</span>&lt;目录或文件&gt;                   略过指定的目录或文件。
</span></span><span class="line"><span class="cl">-D或--dereference-args                  显示指定符号链接的源文件大小。
</span></span><span class="line"><span class="cl">-H或--si                                与-h参数相同，但是K，M，G是以1000为换算单位。
</span></span><span class="line"><span class="cl">-l或--count-links                       重复计算硬件链接的文件。
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实例" class="headerLink">
    <a href="#%e5%ae%9e%e4%be%8b" class="header-mark"></a>实例</h3><p>按文件大小排序：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ du -sh * <span class="p">|</span> sort -h
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示目录或者文件所占空间：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ du
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示指定文件所占空间：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ du xxxxx
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看指定目录的所占空间：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ du scf
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示多个文件所占空间：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ du xxxx.tar.gz yyyy.tar.gz
</span></span><span class="line"><span class="cl"><span class="m">4</span> xxxx.tar.gz
</span></span><span class="line"><span class="cl"><span class="m">4</span> yyyy.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><p>只显示总和的大小:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ du -s
</span></span><span class="line"><span class="cl"><span class="m">1288</span> .
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ du -s scf
</span></span><span class="line"><span class="cl"><span class="m">32</span> scf
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示总和的大小且易读:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">du -sh <span class="se">\$</span>dir
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
